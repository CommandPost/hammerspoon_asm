// NSTextView
// +   @property BOOL acceptsGlyphInfo
// +   @property BOOL allowsDocumentBackgroundColorChange
// +   @property BOOL allowsImageEditing
// +   @property BOOL allowsUndo
// +   @property BOOL displaysLinkToolTips
// +   @property BOOL drawsBackground
// +   @property BOOL importsGraphics
// +   @property BOOL smartInsertDeleteEnabled
// +   @property BOOL usesFindBar
// +   @property BOOL usesFindPanel
// +   @property BOOL usesFontPanel
// +   @property BOOL usesInspectorBar
// +   @property BOOL usesRuler
// +   @property(getter=isAutomaticDashSubstitutionEnabled) BOOL automaticDashSubstitutionEnabled
// +   @property(getter=isAutomaticDataDetectionEnabled) BOOL automaticDataDetectionEnabled
// +   @property(getter=isAutomaticLinkDetectionEnabled) BOOL automaticLinkDetectionEnabled
// +   @property(getter=isAutomaticQuoteSubstitutionEnabled) BOOL automaticQuoteSubstitutionEnabled
// +   @property(getter=isAutomaticSpellingCorrectionEnabled) BOOL automaticSpellingCorrectionEnabled
// +   @property(getter=isAutomaticTextReplacementEnabled) BOOL automaticTextReplacementEnabled
// +   @property(getter=isContinuousSpellCheckingEnabled) BOOL continuousSpellCheckingEnabled
// +   @property(getter=isEditable) BOOL editable
// +   @property(getter=isFieldEditor) BOOL fieldEditor
// +   @property(getter=isGrammarCheckingEnabled) BOOL grammarCheckingEnabled
// +   @property(getter=isIncrementalSearchingEnabled) BOOL incrementalSearchingEnabled
// +   @property(getter=isRichText) BOOL richText
// +   @property(getter=isRulerVisible) BOOL rulerVisible
// +   @property(getter=isSelectable) BOOL selectable
// +   @property NSSelectionGranularity selectionGranularity
// +   @property(copy) NSColor *backgroundColor
// +   @property(copy) NSColor *insertionPointColor
// +   @property NSSize textContainerInset
//     @property(copy) NSParagraphStyle *defaultParagraphStyle

// ?   @property(copy) NSArray <NSString *> *allowedInputSourceLocales
// ?   @property(copy) NSArray <NSValue *> *selectedRanges
// ?   @property(copy) NSDictionary <NSString *,id> *linkTextAttributes
// ?   @property(copy) NSDictionary <NSString *,id> *markedTextAttributes
// ?   @property(copy) NSDictionary <NSString *,id> *selectedTextAttributes
// ?   @property(copy) NSDictionary <NSString *,id> *typingAttributes
// ?   @property NSTextCheckingTypes enabledTextCheckingTypes                               -- not sure...
// ?   @property(assign) id< NSTextViewDelegate > delegate                                  -- needed?
// ?   @property(assign) NSTextContainer *textContainer                                     -- needed?
// ?   @property(getter=isCoalescingUndo, readonly) BOOL coalescingUndo                     -- needed?
// ?   @property(readonly, assign) NSLayoutManager *layoutManager                           -- needed?
// ?   @property(readonly, assign) NSTextStorage *textStorage                               -- needed?
// ?   @property(readonly, copy) NSArray <NSString *> *acceptableDragTypes                  -- needed?
// ?   @property(readonly, copy) NSArray <NSString *> *readablePasteboardTypes              -- needed?
// ?   @property(readonly, copy) NSArray <NSString *> *writablePasteboardTypes              -- needed?
// ?   @property(readonly, copy) NSArray <NSValue *> *rangesForUserCharacterAttributeChange -- needed?
// ?   @property(readonly, copy) NSArray <NSValue *> *rangesForUserParagraphAttributeChange -- needed?
// ?   @property(readonly, copy) NSArray <NSValue *> *rangesForUserTextChange               -- needed?
// ?   @property(readonly) BOOL shouldDrawInsertionPoint                                    -- needed?
// ?   @property(readonly) NSInteger spellCheckerDocumentTag                                -- needed?
// ?   @property(readonly) NSPoint textContainerOrigin                                      -- needed?
// ?   @property(readonly) NSRange rangeForUserCharacterAttributeChange                     -- needed?
// ?   @property(readonly) NSRange rangeForUserCompletion                                   -- needed?
// ?   @property(readonly) NSRange rangeForUserParagraphAttributeChange                     -- needed?
// ?   @property(readonly) NSRange rangeForUserTextChange                                   -- needed?
// ?   @property(readonly) NSSelectionAffinity selectionAffinity                            -- needed?

//     - (BOOL)becomeFirstResponder
//     - (BOOL)dragSelectionWithEvent:(NSEvent *)event offset:(NSSize)mouseOffset slideBack:(BOOL)slideBack
//     - (BOOL)readSelectionFromPasteboard:(NSPasteboard *)pboard
//     - (BOOL)readSelectionFromPasteboard:(NSPasteboard *)pboard type:(NSString *)type
//     - (BOOL)resignFirstResponder
//     - (BOOL)rulerView:(NSRulerView *)aRulerView shouldAddMarker:(NSRulerMarker *)aMarker
//     - (BOOL)rulerView:(NSRulerView *)aRulerView shouldMoveMarker:(NSRulerMarker *)aMarker
//     - (BOOL)rulerView:(NSRulerView *)aRulerView shouldRemoveMarker:(NSRulerMarker *)aMarker
//     - (BOOL)shouldChangeTextInRange:(NSRange)affectedCharRange replacementString:(NSString *)replacementString
//     - (BOOL)shouldChangeTextInRanges:(NSArray<NSValue *> *)affectedRanges replacementStrings:(NSArray<NSString *> *)replacementStrings
//     - (BOOL)writeSelectionToPasteboard:(NSPasteboard *)pboard type:(NSString *)type
//     - (BOOL)writeSelectionToPasteboard:(NSPasteboard *)pboard types:(NSArray<NSString *> *)types
//     - (CGFloat)rulerView:(NSRulerView *)aRulerView willAddMarker:(NSRulerMarker *)aMarker atLocation:(CGFloat)location
//     - (CGFloat)rulerView:(NSRulerView *)aRulerView willMoveMarker:(NSRulerMarker *)aMarker toLocation:(CGFloat)location
//     - (IBAction)orderFrontSharingServicePicker:(id)sender
//     - (IBAction)toggleQuickLookPreviewPanel:(id)sender
//     - (id)validRequestorForSendType:(NSString *)sendType returnType:(NSString *)returnType
//     - (instancetype)initWithFrame:(NSRect)frameRect
//     - (instancetype)initWithFrame:(NSRect)frameRect textContainer:(NSTextContainer *)aTextContainer
//     - (NSArray<id<QLPreviewItem>> *)quickLookPreviewableItemsInRanges:(NSArray<NSValue *> *)ranges
//     - (NSArray<NSString *> *)completionsForPartialWordRange:(NSRange)charRange indexOfSelectedItem:(NSInteger *)index
//     - (NSDragOperation)dragOperationForDraggingInfo:(id<NSDraggingInfo>)dragInfo type:(NSString *)type
//     - (NSImage *)dragImageForSelectionWithEvent:(NSEvent *)event origin:(NSPointPointer)origin
//     - (NSRange)selectionRangeForProposedRange:(NSRange)proposedSelRange granularity:(NSSelectionGranularity)granularity
//     - (NSRange)smartDeleteRangeForProposedRange:(NSRange)proposedCharRange
//     - (NSString *)preferredPasteboardTypeFromArray:(NSArray<NSString *> *)availableTypes restrictedToTypesFromArray:(NSArray<NSString *> *)allowedTypes
//     - (NSString *)smartInsertAfterStringForString:(NSString *)aString replacingRange:(NSRange)charRange
//     - (NSString *)smartInsertBeforeStringForString:(NSString *)aString replacingRange:(NSRange)charRange
//     - (NSUInteger)characterIndexForInsertionAtPoint:(NSPoint)point
//     - (void)alignJustified:(id)sender
//     - (void)breakUndoCoalescing
//     - (void)changeAttributes:(id)sender
//     - (void)changeColor:(id)sender
//     - (void)changeDocumentBackgroundColor:(id)sender
//     - (void)changeLayoutOrientation:(id)sender
//     - (void)checkTextInDocument:(id)sender
//     - (void)checkTextInRange:(NSRange)range types:(NSTextCheckingTypes)checkingTypes options:(NSDictionary<NSString *,id> *)options
//     - (void)checkTextInSelection:(id)sender
//     - (void)cleanUpAfterDragOperation
//     - (void)clickedOnLink:(id)link atIndex:(NSUInteger)charIndex
//     - (void)complete:(id)sender
//     - (void)didChangeText
//     - (void)drawInsertionPointInRect:(NSRect)aRect color:(NSColor *)aColor turnedOn:(BOOL)flag
//     - (void)drawViewBackgroundInRect:(NSRect)rect
//     - (void)handleTextCheckingResults:(NSArray<NSTextCheckingResult *> *)results forRange:(NSRange)range types:(NSTextCheckingTypes)checkingTypes options:(NSDictionary<NSString *,id> *)options orthography:(NSOrthography *)orthography wordCount:(NSInteger)wordCount
//     - (void)insertCompletion:(NSString *)word forPartialWordRange:(NSRange)charRange movement:(NSInteger)movement isFinal:(BOOL)flag
//     - (void)insertText:(id)aString
//     - (void)invalidateTextContainerOrigin
//     - (void)loosenKerning:(id)sender
//     - (void)lowerBaseline:(id)sender
//     - (void)orderFrontLinkPanel:(id)sender
//     - (void)orderFrontListPanel:(id)sender
//     - (void)orderFrontSpacingPanel:(id)sender
//     - (void)orderFrontSubstitutionsPanel:(id)sender
//     - (void)orderFrontTablePanel:(id)sender
//     - (void)outline:(id)sender
//     - (void)pasteAsPlainText:(id)sender
//     - (void)pasteAsRichText:(id)sender
//     - (void)performFindPanelAction:(id)sender
//     - (void)raiseBaseline:(id)sender
//     - (void)replaceTextContainer:(NSTextContainer *)aTextContainer
//     - (void)rulerView:(NSRulerView *)aRulerView didAddMarker:(NSRulerMarker *)aMarker
//     - (void)rulerView:(NSRulerView *)aRulerView didMoveMarker:(NSRulerMarker *)aMarker
//     - (void)rulerView:(NSRulerView *)aRulerView didRemoveMarker:(NSRulerMarker *)aMarker
//     - (void)rulerView:(NSRulerView *)aRulerView handleMouseDown:(NSEvent *)theEvent
//     - (void)setAlignment:(NSTextAlignment)alignment range:(NSRange)aRange
//     - (void)setBaseWritingDirection:(NSWritingDirection)writingDirection range:(NSRange)range
//     - (void)setConstrainedFrameSize:(NSSize)desiredSize
//     - (void)setLayoutOrientation:(NSTextLayoutOrientation)theOrientation
//     - (void)setNeedsDisplayInRect:(NSRect)aRect avoidAdditionalLayout:(BOOL)flag
//     - (void)setSelectedRange:(NSRange)charRange
//     - (void)setSelectedRange:(NSRange)charRange affinity:(NSSelectionAffinity)affinity stillSelecting:(BOOL)flag
//     - (void)setSelectedRanges:(NSArray<NSValue *> *)ranges affinity:(NSSelectionAffinity)affinity stillSelecting:(BOOL)stillSelectingFlag
//     - (void)setSpellingState:(NSInteger)value range:(NSRange)charRange
//     - (void)showFindIndicatorForRange:(NSRange)charRange
//     - (void)smartInsertForString:(NSString *)aString replacingRange:(NSRange)charRange beforeString:(NSString * _Nullable *)beforeString afterString:(NSString * _Nullable *)afterString
//     - (void)startSpeaking:(id)sender
//     - (void)stopSpeaking:(id)sender
//     - (void)tightenKerning:(id)sender
//     - (void)toggleBaseWritingDirection:(id)sender
//     - (void)toggleTraditionalCharacterShape:(id)sender
//     - (void)turnOffKerning:(id)sender
//     - (void)turnOffLigatures:(id)sender
//     - (void)updateDragTypeRegistration
//     - (void)updateFontPanel
//     - (void)updateInsertionPointStateAndRestartTimer:(BOOL)flag
//     - (void)updateQuickLookPreviewPanel
//     - (void)updateRuler
//     - (void)useAllLigatures:(id)sender
//     - (void)useStandardKerning:(id)sender
//     - (void)useStandardLigatures:(id)sender

//     - (void)toggleAutomaticDashSubstitution:(id)sender   -- shouldn't need
//     - (void)toggleAutomaticDataDetection:(id)sender      -- shouldn't need
//     - (void)toggleAutomaticLinkDetection:(id)sender      -- shouldn't need
//     - (void)toggleAutomaticQuoteSubstitution:(id)sender  -- shouldn't need
//     - (void)toggleAutomaticSpellingCorrection:(id)sender -- shouldn't need
//     - (void)toggleAutomaticTextReplacement:(id)sender    -- shouldn't need
//     - (void)toggleContinuousSpellChecking:(id)sender     -- shouldn't need
//     - (void)toggleGrammarChecking:(id)sender             -- shouldn't need
//     - (void)toggleSmartInsertDelete:(id)sender           -- shouldn't need
//     + (void)registerForServices                          -- shouldn't need

// inherited from NSText
//     - (BOOL)readRTFDFromFile:(NSString *)path
//     - (BOOL)writeRTFDToFile:(NSString *)path atomically:(BOOL)flag
//     - (NSData *)RTFDFromRange:(NSRange)range
//     - (NSData *)RTFFromRange:(NSRange)range
//     - (void)alignCenter:(id)sender
//     - (void)alignLeft:(id)sender
//     - (void)alignRight:(id)sender
//     - (void)changeFont:(id)sender
//     - (void)checkSpelling:(id)sender
//     - (void)copy:(id)sender
//     - (void)copyFont:(id)sender
//     - (void)copyRuler:(id)sender
//     - (void)cut:(id)sender
//     - (void)delete:(id)sender
//     - (void)paste:(id)sender
//     - (void)pasteFont:(id)sender
//     - (void)pasteRuler:(id)sender
//     - (void)replaceCharactersInRange:(NSRange)aRange withRTF:(NSData *)rtfData
//     - (void)replaceCharactersInRange:(NSRange)aRange withRTFD:(NSData *)rtfdData
//     - (void)replaceCharactersInRange:(NSRange)aRange withString:(NSString *)aString
//     - (void)scrollRangeToVisible:(NSRange)range
//     - (void)selectAll:(id)sender
//     - (void)setFont:(NSFont *)font range:(NSRange)range
//     - (void)setTextColor:(NSColor *)color range:(NSRange)range
//     - (void)showGuessPanel:(id)sender
//     - (void)sizeToFit
//     - (void)subscript:(id)sender
//     - (void)superscript:(id)sender
//     - (void)toggleRuler:(id)sender
//     - (void)underline:(id)sender
//     - (void)unscript:(id)sender

// +   @property NSRange selectedRange

// /   @property NSTextAlignment alignment
// /   @property NSWritingDirection baseWritingDirection
// /   @property(copy) NSColor *textColor
// ?   @property(copy) NSString *string
// /   @property(strong) NSFont *font

// -   @property NSSize maxSize
// -   @property NSSize minSize
// -   @property(getter=isHorizontallyResizable) BOOL horizontallyResizable
// -   @property(getter=isVerticallyResizable) BOOL verticallyResizable

// -   @property BOOL drawsBackground
// -   @property BOOL importsGraphics
// -   @property BOOL usesFontPanel
// -   @property(assign) id< NSTextDelegate > delegate
// -   @property(copy) NSColor *backgroundColor
// -   @property(getter=isEditable) BOOL editable
// -   @property(getter=isFieldEditor) BOOL fieldEditor
// -   @property(getter=isRichText) BOOL richText
// -   @property(getter=isRulerVisible, readonly) BOOL rulerVisible
// -   @property(getter=isSelectable) BOOL selectable

// theView.textContainer:
//   add
//     @property BOOL heightTracksTextView
//     @property BOOL widthTracksTextView
//     @property CGFloat lineFragmentPadding
//     @property NSSize containerSize
//
//   maybe (10.11 only)
//     @property NSLineBreakMode lineBreakMode
//     @property(copy) NSArray <NSBezierPath *> *exclusionPaths
//
//     how does this differ from containerSize? may need to switch in 10.12
//     @property NSSize size
//
//   don't need
//     @property NSUInteger maximumNumberOfLines
//     @property(getter=isSimpleRectangularTextContainer, readonly) BOOL simpleRectangularTextContainer
//     @property(assign) NSLayoutManager *layoutManager
//     @property(strong) NSTextView *textView
//     - (BOOL)containsPoint:(NSPoint)aPoint
//     - (NSRect)lineFragmentRectForProposedRect:(NSRect)proposedRect atIndex:(NSUInteger)characterIndex writingDirection:(NSWritingDirection)baseWritingDirection remainingRect:(NSRect *)remainingRect
//     - (NSRect)lineFragmentRectForProposedRect:(NSRect)proposedRect sweepDirection:(NSLineSweepDirection)sweepDirection movementDirection:(NSLineMovementDirection)movementDirection remainingRect:(NSRectPointer)remainingRect
//     - (instancetype)initWithContainerSize:(NSSize)aSize
//     - (instancetype)initWithSize:(NSSize)size
//     - (void)replaceLayoutManager:(NSLayoutManager *)aLayoutManager



[theWindow makeFirstResponder:theTextView];

        <window title="Hammerspoon Console" allowsToolTipsWhenApplicationIsInactive="NO" autorecalculatesKeyViewLoop="NO" oneShot="NO" releasedWhenClosed="NO" showsToolbarButton="NO" visibleAtLaunch="NO" frameAutosaveName="console" animationBehavior="default" id="P23-aL-ez6">
            <windowStyleMask key="styleMask" titled="YES" closable="YES" miniaturizable="YES" resizable="YES"/>
            <windowPositionMask key="initialPositionMask" leftStrut="YES" rightStrut="YES" topStrut="YES" bottomStrut="YES"/>
            <rect key="contentRect" x="916" y="704" width="510" height="389"/>
            <rect key="screenRect" x="0.0" y="0.0" width="1920" height="1177"/>
            <value key="minSize" type="size" width="340" height="200"/>
            <view key="contentView" id="2jF-WS-ElT">
                <rect key="frame" x="0.0" y="5" width="510" height="389"/>
                <autoresizingMask key="autoresizingMask"/>
                <subviews>
                    <scrollView horizontalLineScroll="10" horizontalPageScroll="10" verticalLineScroll="10" verticalPageScroll="10" hasHorizontalScroller="NO" usesPredominantAxisScrolling="NO" translatesAutoresizingMaskIntoConstraints="NO" id="gls-wS-aCi">
                        <rect key="frame" x="20" y="51" width="470" height="318"/>
                        <clipView key="contentView" id="vxQ-4d-mld">
                            <rect key="frame" x="1" y="1" width="468" height="316"/>
                            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                            <subviews>
                                <textView importsGraphics="NO" findStyle="panel" continuousSpellChecking="YES" allowsUndo="YES" usesRuler="YES" usesFontPanel="YES" verticallyResizable="YES" allowsNonContiguousLayout="YES" quoteSubstitution="YES" dashSubstitution="YES" spellingCorrection="YES" smartInsertDelete="YES" id="Jlb-eC-MmZ">
                                    <rect key="frame" x="0.0" y="0.0" width="468" height="316"/>
                                    <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                                    <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                                    <size key="minSize" width="468" height="316"/>
                                    <size key="maxSize" width="612" height="10000000"/>
                                    <color key="insertionPointColor" white="0.0" alpha="1" colorSpace="calibratedWhite"/>
                                    <size key="minSize" width="468" height="316"/>
                                    <size key="maxSize" width="612" height="10000000"/>
                                </textView>
                            </subviews>
                            <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                        </clipView>
                        <scroller key="horizontalScroller" hidden="YES" verticalHuggingPriority="750" doubleValue="1" horizontal="YES" id="bBB-1O-Jf0">
                            <rect key="frame" x="-100" y="-100" width="87" height="18"/>
                            <autoresizingMask key="autoresizingMask"/>
                        </scroller>
                        <scroller key="verticalScroller" verticalHuggingPriority="750" horizontal="NO" id="Kjj-rY-Bja">
                            <rect key="frame" x="453" y="1" width="16" height="316"/>
                            <autoresizingMask key="autoresizingMask"/>
                        </scroller>
                    </scrollView>
                    <textField horizontalCompressionResistancePriority="250" translatesAutoresizingMaskIntoConstraints="NO" id="vJ5-eP-Q1d" customClass="HSGrowingTextField">
                        <rect key="frame" x="20" y="20" width="470" height="23"/>
                        <textFieldCell key="cell" selectable="YES" editable="YES" state="on" borderStyle="bezel" drawsBackground="YES" id="CiF-1K-0Ju">
                            <font key="font" size="12" name="Menlo-Regular"/>
                            <color key="textColor" name="textColor" catalog="System" colorSpace="catalog"/>
                            <color key="backgroundColor" name="textBackgroundColor" catalog="System" colorSpace="catalog"/>
                        </textFieldCell>
                        <connections>
                            <action selector="tryMessage:" target="-2" id="GvF-5y-amg"/>
                            <outlet property="delegate" destination="-2" id="1xm-Tn-Djn"/>
                        </connections>
                    </textField>
                </subviews>
                <constraints>
                    <constraint firstItem="gls-wS-aCi" firstAttribute="leading" secondItem="2jF-WS-ElT" secondAttribute="leading" constant="20" symbolic="YES" id="8lt-NC-8lb"/>
                    <constraint firstItem="gls-wS-aCi" firstAttribute="leading" secondItem="vJ5-eP-Q1d" secondAttribute="leading" id="FuK-Pe-GX1"/>
                    <constraint firstItem="gls-wS-aCi" firstAttribute="top" secondItem="2jF-WS-ElT" secondAttribute="top" constant="20" symbolic="YES" id="Mft-CB-NaS"/>
                    <constraint firstItem="gls-wS-aCi" firstAttribute="trailing" secondItem="vJ5-eP-Q1d" secondAttribute="trailing" id="Q0c-A5-ccR"/>
                    <constraint firstItem="vJ5-eP-Q1d" firstAttribute="top" secondItem="gls-wS-aCi" secondAttribute="bottom" constant="8" symbolic="YES" id="cKa-aW-pVo"/>
                    <constraint firstAttribute="bottom" secondItem="vJ5-eP-Q1d" secondAttribute="bottom" constant="20" symbolic="YES" id="l7i-HB-QJn"/>
                    <constraint firstAttribute="trailing" secondItem="gls-wS-aCi" secondAttribute="trailing" constant="20" symbolic="YES" id="mtT-OB-UbD"/>
                </constraints>
            </view>
            <connections>
                <outlet property="initialFirstResponder" destination="vJ5-eP-Q1d" id="jTh-hp-JPK"/>
            </connections>
            <point key="canvasLocation" x="552" y="415.5"/>
        </window>
