/// hs._asm.canvas:elements([elementsArray]) -> canvasObject | currentValue
/// Method
/// Get or set the canvas elements for the canvas.
///
/// Parameters:
///  * `elementsArray` - An optional array specifying the canvas elements which are drawn into this canvas. The elements will be drawn in order, and each element in the array is a table with one or more of the following key-value pairs:
///    * REQUIRED:
///      * `type` - Specifies the type of canvas element. This key is required for all canvas elements of the canvas. Valid canvas element types are:
///        * `arc`           - Specifies an arc inscribed on a circle defined by its center and radius.
///        * `circle`        - Specifies a circle defined by its center and radius.
///        * `curve`         - *unimplemented at present* Specifies a single bezier curve. May become syntactic sugar for `segments`.
///        * `ellipticalArc` - Specifies an arc which can be inscribed on a circle or an oval. Internally, the `arc` type is converted into this type.
///        * `image`         - Specifies an image as provided by one of the `hs.image` constructors.
///        * `line`          - Specifies a single straight line. May become syntactic sugar for single item `segments`.
///        * `oval`          - Specifies an oval or circle. Internally, the `circle` type is converted into this type.
///        * `point`         - Specifies a single point (technically a unit rectangle, so may just be syntactic sugar for that)
///        * `rectangle`     - Specifies a rectangle, optionally with rounded corners
///        * `resetClip`     - Special type indicating that the clipping region should be reset to its initial state (i.e. just the boundaries of the canvas itself). No other key-value pairs included with this element will be examined.
///        * `segments`      - *unimplemented at present* Specifies multiple connected line or curve segments which can be closed (i.e. the starting point is also the ending point) or open.
///        * `text`          - Specifies text. Supports the simplified text model of `hs.drawing` as well as the more powerful `hs.styledtext` module.
///
///    * Optional key-value pairs for all element types:
///      * `absolutePosition` - *unimplemented at present* a boolean value specifying whether or not the canvas element's position is absolute within the canvas or relative. If the position is relative, it will be adjusted when the canvas is resized to reflect the changed canvas size and the object's relative distance from the origin (top-left) of the canvas. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `false` unless changed.
///      * `absoluteSize`     - *unimplemented at present* a boolean value specifying whether or not the canvas element's size is absolute within the canvas or relative. If the size is relative, it will be adjusted when the canvas is resized to reflect the changed canvas size and the object's size relative to it. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `false` unless changed.
///      * `addToClipRegion`  - *unimplemented at present* Use the canvas element's path as an addition to the canvas clipping path instead of as a visual element of the canvas. Clear all additions tot he clipping path by adding an element of type `resetClip`.
///      * `compositeRule`    - *unimplemented at present* A string which specifies how a canvas element is combined with the earlier elements of the canvas. Valid values for this field can be found in the [hs._asm.canvas.compositeTypes](#compositeTypes) table. The default compositing rule for the canvas is `sourceOver`.
///      * `id`               - *unimplemented at present* A string or number used as a label which is included as an argument to any callback associated with a canvas element. If this field is not provided and a callback is required, the canvas elements index position in the elements array will be used instead. Since this number may change as you add or remove canvas elements to the canvas, it is recommended that you specify a value for this key if you enable any callbacks for the element.
///      * `trackMouseDown`   - *unimplemented at present* If this is true, and a callback function has been defined for the canvas, generate a callback when a mouse button is clicked within the bounds of this canvas element. The arguments to the callback function will be `canvasObject, "mouseDown", id`. Use `hs.eventtap.checkMouseButtons` within the callback to determine which mouse button is down, if a distinction is required. If multiple canvas elements overlap the location where the mouse click occurred, the order in which they are called back is undetermined. Defaults to nil (false).
///      * `trackMouseUp`     - *unimplemented at present* If this is true, and a callback function has been defined for the canvas, generate a callback when a mouse button is released within the bounds of this canvas element. The arguments to the callback function will be `canvasObject, "mouseUp", id`. If multiple canvas elements overlap the location where the mouse click occurred, the order in which they are called back is undetermined. Defaults to nil (false).
///      * `trackMouseEnter`  - *unimplemented at present* If this is true, and a callback function has been defined for the canvas, generate a callback when the mouse pointer enters the bounds of this canvas element. The arguments to the callback function will be `canvasObject, "mouseEnter", id`. If multiple canvas elements share the same boundary where the crossing occurred, the order in which they are called back is undetermined. Defaults to nil (false).
///      * `trackMouseExit`   - *unimplemented at present* If this is true, and a callback function has been defined for the canvas, generate a callback when the mouse pointer exits the bounds of this canvas element. The arguments to the callback function will be `canvasObject, "mouseExit", id`. If multiple canvas elements share the same boundary where the crossing occurred, the order in which they are called back is undetermined. Defaults to nil (false).
///      * `trackMouseMove`   - *unimplemented at present* If this is true, and a callback function has been defined for the canvas, generate a callback when the mouse pointer moves within the bounds of this canvas element. The arguments to the callback function will be `canvasObject, "mouseMove", id, x, y`, where `x` and `y` specify the mouse pointer's position within the canvas. If multiple canvas elements share the same boundary where the crossing occurred, the order in which they are called back is undetermined. Defaults to nil (false).
///
///    * The following key-value pairs are used to define the specifics for the canvas element type. Not all pairs will be applicable to all element types.
///      * `center`             - Used by the `arc` and `circle` canvas element types to specify the center of the circle. Defaults to `{ x = canvas.w / 2, y = canvas.w / 2 }`. See Notes section below concerning the `arc` and `circle` element types.
///      * `end`                - Used by the `line` canvas element type to specify the ending point of the line segment. Defaults to `{ x = canvas.w, y = canvas.h }` and will be copied into the element definition if not provided initially.
///      * `endAngle`           - Used by the `arc` and `ellipticalArc` canvas element types to specify the ending angle of the arc inscribed on the circle or oval. Defaults to `360` and will be copied into the element definition if not provided initially.
///      * `fill`               - A boolean flag, specifying whether or not a closed canvas element (most of them) should be filled in. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `true` unless changed.
///      * `fillColor`          - A color table as supported by the `hs.drawing.color` module, specifying the fill color for a closed canvas element (most of them) when `fill` is true. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `{ red = 1.0, alpha = 1.0 }` (red) unless changed.
///      * `fillGradient`       - A table specifying the starting color, ending color, and angle of a gradient which should be used to fill an object when `fill` is true. If the `startColor` and `endColor` keys of this table are set, this key will override the `fillColor` field. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `{ startColor = nil, endColor = nil, angle = 0.0 }` unless changed.
///      * `flatness`           - *unimplemented at present*
///      * `flatten`            - *unimplemented at present*
///      * `frame`              - A rect-table specifying the bounding box (size) for the following canvas element types: `oval`, `ellipticalArc`, `image`, `rectangle`, `text`.  Defaults to `{ x = 0, y = 0, h = canvas.h, w = canvas.w }` and will be copied into the element definition if not provided initially.
///      * `image`              - An `hs.image` object specifying the image to be displayed for the canvas element `image` type.
///      * `imageAlignment`     - A string specifying the alignment of an image that doesn't fully fill an image canvas element's `frame`. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `center` unless changed. Valid values for this string are:
///        * `topLeft`     - the image's top left corner will match the canvas element's top left corner
///        * `top`         - the image's top match the canvas element's top and will be centered horizontally
///        * `topRight`    - the image's top right corner will match the canvas element's top right corner
///        * `left`        - the image's left side will match the canvas element's left side and will be centered vertically
///        * `center`      - the image will be centered vertically and horizontally within the canvas element
///        * `right`       - the image's right side will match the canvas element's right side and will be centered vertically
///        * `bottomLeft`  - the image's bottom left corner will match the canvas element's bottom left corner
///        * `bottom`      - the image's bottom match the canvas element's bottom and will be centered horizontally
///        * `bottomRight` - the image's bottom right corner will match the canvas element's bottom right corner
///      * `imageAnimates`      - A boolean specifying whether or not an animated GIF image should cycle through its animation. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `true` unless changed.
///      * `imageFrameStyle`    - A string specifying the type of frame should be around the image canvas element. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `none` unless changed. Valid values for this string are:
///        * `none`   - no frame is drawing around the image
///        * `photo`  - a thin black outline with a white background and a dropped shadow.
///        * `bezel`  - a gray, concave bezel with no background that makes the image look sunken.
///        * `groove` - a thin groove with a gray background that looks etched around the image.
///        * `button` - a convex bezel with a gray background that makes the image stand out in relief, like a button.
///      * `imageRotation`      - A number specifying the the angle in degrees to rotate the image around its center in a clockwise direction. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `0.0` unless changed.
///      * `imageScaling`       - A string specifying how an image is scaled within the frame of a canvas element containing the image. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `scaleProportionally` unless changed. Valid values for this string are:
///        * `shrinkToFit`         - shrink the image, preserving the aspect ratio, to fit the drawing frame only if the image is larger than the drawing frame.
///        * `scaleToFit`          - shrink or expand the image to fully fill the drawing frame.  This does not preserve the aspect ratio.
///        * `none`                - perform no scaling or resizing of the image.
///        * `scaleProportionally` - shrink or expand the image to fully fill the drawing frame, preserving the aspect ration.
///      * `radius`             - Used by the `arc` and `circle` canvas element types to specify the radius of the circle. Defaults to `canvas.w / 2`. See Notes section below concerning the `arc` and `circle` element types.
///      * `reversePath`        - *unimplemented at present*
///      * `roundedRectRadii`   - A table specifying the radii of the corners of a canvas element of type `rectangle`. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `{ xRadius = 0.0, yRadius = 0.0}` unless changed.
///      * `start`              - Used by the `line` canvas element type to specify the starting point of the line segment. Defaults to `{ x = 0, y = 0 }` and will be copied into the element definition if not provided initially.
///      * `startAngle`         - Used by the `arc` and `ellipticalArc` canvas element types to specify the starting angle of the arc inscribed on the circle or oval. Defaults to `0` and will be copied into the element definition if not provided initially.
///      * `stroke`             - A boolean flag, specifying whether or not to stroke the canvas element. The stroke of a canvas element is usually it's outline.  Does not apply to objects of type `image` or `text`.  Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `true` unless changed.
///      * `strokeCapStyle`     - *unimplemented at present*
///      * `strokeColor`        - A color table as supported by the `hs.drawing.color` module, specifying the stroke color for a closed canvas element (most of them) when `stroke` is true. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `{ alpha = 1.0 }` (black) unless changed.
///      * `strokeDashPattern`  - *unimplemented at present*
///      * `strokeJoinStyle`    - *unimplemented at present*
///      * `strokeMiterLimit`   - *unimplemented at present*
///      * `strokeWidth`        - A number specifying the line width of a canvas element's stroke. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `1.0` unless changed.
///      * `text`               - The text or `hs.styledtext` object to be displayed when the canvas element type is `text`.  If this field contains an `hs.styledtext` object, the `textColor`, `textFont`, and `textSize` fields only apply to portions of the `hs.styledtext` object which have absolutely no style applied to them. Defaults to the empty string "" and will be copied into the element definition if not provided initially.
///      * `textColor`          - A color table as supported by the `hs.drawing.color` module, specifying the text color for the contents of the `text` key. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `{ white = 1.0, alpha = 1.0 }` (white) unless changed.
///      * `textFont`           - A string specifying the font name to use when rendering the contents of the `text` key. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)).
///      * `textSize`           - A number specifying the font size to use when rendering the contents of the `text` key. Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)).
///      * `textStyle`          - A table specifying the `lineBreak` and `alignment` for the contents of the `text` key when the text is provided as a string (this field is ignored if the contents of `text` is an `hs.styledtext` objects).  Defaults to the canvas defaults (see [hs._asm.canvas:allElementDefaults](#allElementDefaults)) of `{ alignment = "natural", lineBreak = "wordWrap" }` unless changed.
///        * Valid values for the `alignment` subKey: "left", "right", "center", "justified", and "natural"
///        * Valid values for the `lineBreak` subKey: "wordWrap", "charWrap", "clip", "truncateHead", "truncateTail", and "truncateMiddle"
///      * `transformation`     - *unimplemented at present*
///      * `windingRule`        - *unimplemented at present*
///
/// Returns:
///  * If an argument is provided, the canvas object; otherwise the current value.
///
/// Notes:
///  * All coordinates used in defining graphical elements are defined in relationship to the top left corner of the canvas object itself (i.e. `{ x = 0, y = 0 }` is the top left corner of the canvas, not the computer screen).
///  * The frame of the canvas provides the visible area in which canvas elements are rendered. Any portion of a canvas element which extends beyond the edges of the canvas will be clipped.
///
///  * The numeric values for any of the following sub-keys may be specified as a percentage in a string of the format `"n[.n]%"` where the numeric portion ranges from 0 - 100, or of the format `"n[.n]"` where the numeric representation in the string ranges from 0.0 to 1.0, and will be generated from the canvas's size as follows:
///    * `x` and 'w' = percentage specified of canvas's width
///    * `y` and 'h' = percentage specified of canvas's height
///  * For example:
///    * `{ x = "50%", y = "0%", h = "100%", w = "50%" }` specifies a rectangle covering the right half of the canvas.
///    * `{ x = "0.0", y = "0.5", h = "0.5", w = "1.0" }` specifics a rectangle covering the bottom half of the canvas.
///
///  * The `arc` type is only a convenience constructor for creating an `ellipticalArc` object. If you retrieve the elements in the canvas with `hs._asm.canvas:elements()`, it will be returned with the appropriate keys for the equivalent `ellipticalArc`. This is allowed because the way an `arc` is defined may make more sense during its construction, if the desired arc is to be inscribed on a circle.
///
///  * The `circle` type is only a convenience constructor for creating an `oval` object. If you retrieve the elements in the canvas with `hs._asm.canvas:elements()`, it will be returned with the appropriate keys for the equivalent `oval`. This is allowed because the way a `circle` is defined may make more sense during its construction, if the desired element is truly a circle.


/// hs._asm.canvas:insertElement(elementTable, [pos]) -> canvasObject
/// Method
/// Insert the specified canvas element into the canvas object's element array.
///
/// Paramters:
///  * `elementTable` - a single canvas element as specified by the key-value pairs defined for canvas elements for [hs._asm.canvas:elements](#elements).
///  * `pos`          - an optional integer specifying the index position to insert this element into, shifting up any existing element and those that follow it. Valid values for `pos` are from 1 to the number of canvas elements currently in the canvas + 1. Default value is the current total + 1 so that the new element will be added at the end of the array of existing elements.
///
/// Returns:
///  * The canvas object


/// hs._asm.canvas:removeElement(pos) -> canvasObject
/// Method
/// Remove the canvas element at the specified index from the canvas object's element array.
///
/// Paramters:
///  * `pos`          - an integer specifying the index position of the element to remove, shifting all following elements down. Valid values for `pos` are from 1 to the number of canvas elements currently in the canvas. Default value is the number of canvas elements currently in the canvas so that last canvas element of the canvas's element array is removed.
///
/// Returns:
///  * The canvas object
