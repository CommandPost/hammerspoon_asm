*   mouse callbacks
*       reduce granularity for elements? increase for canvas?

*   method for element bounds?
*   rotate around element center method

    text/image affect clipping region?
    text/image target actual rendered area instead of frame?

    remove circle and arc?
    add points

    Canvas to hs.image

    merge canvases?
    method to swap elements?

    NSGraphicsContext imageInterpolation?

-- samples:

c = require("hs._asm.canvas")
a = c.new{x=100,y=100,h=500,w=500}:appendElements{ {
    action = "build", padding = 0, type = "rectangle"
  }, {
    action = "build", padding = 0, radius = ".3", reversePath = true, type = "circle"
  }, {
    action = "clip", padding = 0, radius = ".1", type = "circle"
  }, {
    action = "fill",
    fillColor = { alpha = 0.5, green = 1.0  },
    frame = { x = "0", y = "0", h = ".75", w = ".75", },
    type = "rectangle",
    withShadow = true,
  }, {
    action = "fill",
    center = { x = "0.625", y = "0.625" },
    fillColor = { alpha = 0.5, red = 1.0  },
    radius = ".375",
    type = "circle",
    withShadow = true,
  }, {
    type = "resetClip"
  }, {
    action = "fill",
    fillColor = { alpha = 0.25, blue = 0.5, green = 0.5  },
    frame = { h = 500.0, w = 500.0, x = 0.0, y = 0.0 },
    type = "rectangle",
  } }:show()


y = false ; z = 0 ; hs.timer.doWhile(function() return y ~= true end, function() a[1].transformation = c.matrix.translate(250, 250):rotate(z):translate(-250, -250) ; a:topLeft(hs.mouse.getAbsolutePosition()) ; z = z + 2 end, .1)


y = false ; z = 0 ; hs.timer.doWhile(function() return y ~= true end, function() a[4].transformation = c.matrix.translate(190, 190):rotate(z):translate(-190, -190) ; a:topLeft(hs.mouse.getAbsolutePosition()) ; z = z + 2 end, .1)


local sp = hs.mouse.getAbsolutePosition()
y = false ;
hs.timer.doWhile(function() if y == true then
        a:transformation(nil)
    end
    return not y
end, function()
    local cp = hs.mouse.getAbsolutePosition()
    a:transformation(c.matrix.translate(cp.x - sp.x, cp.y - sp.y))
end, .01)



c = require("hs._asm.canvas")
a = c.new{ x = 100, y = 100, h = 500, w = 500 }
a[1] = {
  coordinates = {
    { x = ".1", y = ".5" },
    { x = ".9", y = ".5", c1x = ".1", c1y = ".1", c2x = ".9", c2y = ".9" },
    { x = ".1", y = ".5", c1x = ".9", c1y = ".1", c2x = ".1", c2y = ".9" },
  },
  fillColor = { blue = 1 },
  type = "segments",
}

a[2] = {
  coordinates = {
    { x = ".5", y = ".1" },
    { x = ".5", y = ".9", c1x = ".1", c1y = ".1", c2x = ".9", c2y = ".9" },
    { x = ".5", y = ".1", c1x = ".1", c1y = ".9", c2x = ".9", c2y = ".1" },
  },
  fillColor = { blue = 1 },
  type = "segments",
}

a:show()

y = false ; z = 0 ; hs.timer.doWhile(function() return y ~= true end, function() local sz = a:size() ; a._default.transformation = c.matrix.translate(sz.w / 2, sz.h / 2):rotate(z):translate(sz.w / -2, sz.h / -2) z = z + 10 end, .1)
