    Add more types
    Canvas to hs.image
*   fill pattern? -- update hs.drawing.color
    drop line and curve and just do segments?
    point... needed?  thinking graphs here, but unit rectangles work just as well, or image/circle/?
    merge canvases?
    method to swap elements?
*   transform functions
    canvas level transform -- allows alternate origin
        what should this do to percentage based / non-absolute positioning?
*   support shadows

>> Can we optimize by only applying when value in canvas defaults or element?  how much would this help?
The following are saved with the graphics context -- set them before iterating, then change only when set in actual element data (i.e. not inherited from defaults) See https://developer.apple.com/library/prerelease/content/documentation/Cocoa/Conceptual/CocoaDrawingGuide/GraphicsContexts/GraphicsContexts.html#//apple_ref/doc/uid/TP40003290-CH203-BCIHGDAH

++   NSBezierPath setDefaultLineWidth
++   NSBezierPath setDefaultLineJoinStyle
++   NSBezierPath setDefaultLineCapStyle
++   NSBezierPath setDefaultMiterLimit
++   NSBezierPath setDefaultFlatness
++   NSBezierPath setDefaultWindingRule

++   NSGraphicsContext shouldAntialias
++   NSGraphicsContext compositingOperation

++   NSColor setFill
++   NSColor setStroke
//   NSShadow set

    NSFont set (sets name and size)
    NSAffineTransform set/concat ?? -- add type "transform" ??
    NSGraphicsContext imageInterpolation ??
    NSBezierPath addClip **

// Want to add tracking rectangle to this and/or hs.drawing https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/EventOverview/TrackingAreaObjects/TrackingAreaObjects.html

-- sample:

c = require("hs._asm.canvas")
a = c.new{x=100,y=100,h=500,w=500}:appendElements{ {
    action = "build", padding = 0, type = "rectangle"
  }, {
    action = "build", padding = 0, radius = ".3", reversePath = true, type = "circle"
  }, {
    action = "clip", padding = 0, radius = ".1", type = "circle"
  }, {
    action = "fill",
    fillColor = { alpha = 0.5, green = 1.0  },
    frame = { x = "0", y = "0", h = ".75", w = ".75", },
    type = "rectangle",
    withShadow = true,
  }, {
    action = "fill",
    center = { x = "0.625", y = "0.625" },
    fillColor = { alpha = 0.5, red = 1.0  },
    radius = ".375",
    type = "circle",
    withShadow = true,
  }, {
    type = "resetClip"
  }, {
    action = "fill",
    fillColor = { alpha = 0.25, blue = 0.5, green = 0.5  },
    frame = { h = 500.0, w = 500.0, x = 0.0, y = 0.0 },
    type = "rectangle",
  } }:show()

y = false ; z = 0 ; hs.timer.doWhile(function() return y ~= true end, function() a[1].transformation = c.matrix.translate(250, 250):rotate(z):translate(-250, -250) ; a:topLeft(hs.mouse.getAbsolutePosition()) ; z = z + 2 end, .1)

y = false ; z = 0 ; hs.timer.doWhile(function() return y ~= true end, function() a[4].transformation = c.matrix.translate(190, 190):rotate(z):translate(-190, -190) ; a:topLeft(hs.mouse.getAbsolutePosition()) ; z = z + 2 end, .1)
