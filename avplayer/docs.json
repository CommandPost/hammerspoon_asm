[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides an AudioVisual player For Hammerspoon.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Creates a new AVPlayer object which can display audiovisual media for Hammerspoon.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the window for the avplayer object.\n\nReturns:\n * the avplayerObject",
        "stripped_doc" : [
          "Creates a new AVPlayer object which can display audiovisual media for Hammerspoon.",
          ""
        ],
        "def" : "hs._asm.avplayer.new([frame]) -> avplayerObject",
        "name" : "new",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer.new([frame]) -> avplayerObject",
        "type" : "Constructor",
        "returns" : [
          " * the avplayerObject"
        ],
        "desc" : "Creates a new AVPlayer object which can display audiovisual media for Hammerspoon.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the window for the avplayer object.",
          ""
        ]
      }
    ],
    "doc" : "Provides an AudioVisual player For Hammerspoon.\n\nPlayback of remote or streaming content has not been thoroughly tested; it's not something I do very often.  However, it has been tested against http:\/\/devimages.apple.com\/iphone\/samples\/bipbop\/bipbopall.m3u8, which is a sample URL provided in the Apple documentation at https:\/\/developer.apple.com\/library\/prerelease\/content\/documentation\/AudioVideo\/Conceptual\/AVFoundationPG\/Articles\/02_Playback.html#\/\/apple_ref\/doc\/uid\/TP40010188-CH3-SW4",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Creates a new AVPlayer object which can display audiovisual media for Hammerspoon.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the window for the avplayer object.\n\nReturns:\n * the avplayerObject",
        "stripped_doc" : [
          "Creates a new AVPlayer object which can display audiovisual media for Hammerspoon.",
          ""
        ],
        "def" : "hs._asm.avplayer.new([frame]) -> avplayerObject",
        "name" : "new",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer.new([frame]) -> avplayerObject",
        "type" : "Constructor",
        "returns" : [
          " * the avplayerObject"
        ],
        "desc" : "Creates a new AVPlayer object which can display audiovisual media for Hammerspoon.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the window for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Set or remove the additional actions menu from the media controls for the avplayer.\n\nParameters:\n * `menutable` - a table containing a menu definition as described in the documentation for `hs.menubar:setMenu`.  If `nil` is specified, any existing menu is removed.\n\nParameters:\n * the avplayerObject\n\nNotes:\n * All menu keys supported by `hs.menubar:setMenu`, except for the `fn` key, are supported by this method.\n * When a menu item is selected, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) is invoked with the following 4 arguments:\n   * the avplayerObject\n   * \"actionMenu\"\n   * the `title` field of the menu item selected\n   * a table containing the following keys set to true or false indicating which key modifiers were down when the menu item was selected: \"cmd\", \"shift\", \"alt\", \"ctrl\", and \"fn\".",
        "stripped_doc" : [
          "Set or remove the additional actions menu from the media controls for the avplayer.",
          ""
        ],
        "def" : "hs._asm.avplayer:actionMenu(menutable | nil) -> avplayerObject",
        "name" : "actionMenu",
        "notes" : [
          " * All menu keys supported by `hs.menubar:setMenu`, except for the `fn` key, are supported by this method.",
          " * When a menu item is selected, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) is invoked with the following 4 arguments:",
          "   * the avplayerObject",
          "   * \"actionMenu\"",
          "   * the `title` field of the menu item selected",
          "   * a table containing the following keys set to true or false indicating which key modifiers were down when the menu item was selected: \"cmd\", \"shift\", \"alt\", \"ctrl\", and \"fn\"."
        ],
        "signature" : "hs._asm.avplayer:actionMenu(menutable | nil) -> avplayerObject",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Set or remove the additional actions menu from the media controls for the avplayer.",
        "parameters" : [
          " * `menutable` - a table containing a menu definition as described in the documentation for `hs.menubar:setMenu`.  If `nil` is specified, any existing menu is removed.",
          "",
          " * the avplayerObject",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not external playback via AirPlay is allowed for this item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Get or set whether or not external playback via AirPlay is allowed for this item.",
          ""
        ],
        "def" : "hs._asm.avplayer:allowExternalPlayback([state]) -> avplayerObject | current value",
        "name" : "allowExternalPlayback",
        "notes" : [
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.avplayer:allowExternalPlayback([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not external playback via AirPlay is allowed for this item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.",
          ""
        ]
      },
      {
        "doc" : "Get or set the alpha level of the window containing the hs._asm.avplayer object.\n\nParameters:\n * `alpha` - an optional number between 0.0 and 1.0 specifying the new alpha level for the avplayer.\n\nReturns:\n * If a parameter is provided, returns the avplayer object; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the alpha level of the window containing the hs._asm.avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:alpha([alpha]) -> avplayerObject | currentValue",
        "name" : "alpha",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:alpha([alpha]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If a parameter is provided, returns the avplayer object; otherwise returns the current value."
        ],
        "desc" : "Get or set the alpha level of the window containing the hs._asm.avplayer object.",
        "parameters" : [
          " * `alpha` - an optional number between 0.0 and 1.0 specifying the new alpha level for the avplayer.",
          ""
        ]
      },
      {
        "doc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.\n\nParameters:\n * `behavior` - if present, the behavior should be a combination of values found in `hs.canvas.windowBehaviors` describing the window behavior.  The behavior should be specified as one of the following:\n   * integer - a number representing the behavior which can be created by combining values found in `hs.canvas.windowBehaviors` with the logical or operator.\n   * string  - a single key from `hs.canvas.windowBehaviors` which will be toggled in the current window behavior.\n   * table   - a list of keys from `hs.canvas.windowBehaviors` which will be combined to make the final behavior by combining their values with the logical or operator.\n\nReturns:\n * if an argument is provided, then the avplayerObject is returned; otherwise the current behavior value is returned.",
        "stripped_doc" : [
          "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
          ""
        ],
        "def" : "hs._asm.avplayer:behavior([behavior]) -> avplayerObject | currentValue",
        "name" : "behavior",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:behavior([behavior]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, then the avplayerObject is returned; otherwise the current behavior value is returned."
        ],
        "desc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
        "parameters" : [
          " * `behavior` - if present, the behavior should be a combination of values found in `hs.canvas.windowBehaviors` describing the window behavior.  The behavior should be specified as one of the following:",
          "   * integer - a number representing the behavior which can be created by combining values found in `hs.canvas.windowBehaviors` with the logical or operator.",
          "   * string  - a single key from `hs.canvas.windowBehaviors` which will be toggled in the current window behavior.",
          "   * table   - a list of keys from `hs.canvas.windowBehaviors` which will be combined to make the final behavior by combining their values with the logical or operator.",
          ""
        ]
      },
      {
        "doc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.\n\nParameters:\n * behaviorTable - an optional table of strings and\/or numbers specifying the desired window behavior for the avplayer object.\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * Window behaviors determine how the avplayer object is handled by Spaces and Exposé. See `hs.canvas.windowBehaviors` for more information.",
        "stripped_doc" : [
          "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
          ""
        ],
        "def" : "hs._asm.avplayer:behaviorAsLabels(behaviorTable) -> avplayerObject | currentValue",
        "name" : "behaviorAsLabels",
        "notes" : [
          " * Window behaviors determine how the avplayer object is handled by Spaces and Exposé. See `hs.canvas.windowBehaviors` for more information."
        ],
        "signature" : "hs._asm.avplayer:behaviorAsLabels(behaviorTable) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
        "parameters" : [
          " * behaviorTable - an optional table of strings and\/or numbers specifying the desired window behavior for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Places the drawing object on top of normal windows\n\nParameters:\n * `aboveEverything` - An optional boolean value that controls how far to the front the avplayer should be placed. True to place the avplayer on top of all windows (including the dock and menubar and fullscreen windows), false to place the avplayer above normal windows, but below the dock, menubar and fullscreen windows. Defaults to false.\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Places the drawing object on top of normal windows",
          ""
        ],
        "def" : "hs._asm.avplayer:bringToFront([aboveEverything]) -> avplayerObject",
        "name" : "bringToFront",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:bringToFront([aboveEverything]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Places the drawing object on top of normal windows",
        "parameters" : [
          " * `aboveEverything` - An optional boolean value that controls how far to the front the avplayer should be placed. True to place the avplayer on top of all windows (including the dock and menubar and fullscreen windows), false to place the avplayer above normal windows, but below the dock, menubar and fullscreen windows. Defaults to false.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
          ""
        ],
        "def" : "hs._asm.avplayer:ccEnabled([state]) -> avplayerObject | current value",
        "name" : "ccEnabled",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:ccEnabled([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.",
          ""
        ]
      },
      {
        "doc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.\n\nParameters:\n * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:\n   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.\n   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.\n   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.\n   * `minimal`  - media controls are displayed as a round circle in the center of the media display.\n   * `none`     - no media controls are displayed in the media display.\n   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
          ""
        ],
        "def" : "hs._asm.avplayer:controlsStyle([style]) -> avplayerObject | current value",
        "name" : "controlsStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:controlsStyle([style]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
        "parameters" : [
          " * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:",
          "   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.",
          "   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.",
          "   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.",
          "   * `minimal`  - media controls are displayed as a round circle in the center of the media display.",
          "   * `none`     - no media controls are displayed in the media display.",
          "   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".",
          ""
        ]
      },
      {
        "doc" : "Destroys the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * nil\n\nNotes:\n * This method is automatically called during garbage collection, notably during a Hammerspoon termination or reload",
        "stripped_doc" : [
          "Destroys the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:delete() -> nil",
        "name" : "delete",
        "notes" : [
          " * This method is automatically called during garbage collection, notably during a Hammerspoon termination or reload"
        ],
        "signature" : "hs._asm.avplayer:delete() -> nil",
        "type" : "Method",
        "returns" : [
          " * nil",
          ""
        ],
        "desc" : "Destroys the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.\n\nParameters:\n * None\n\nReturns:\n * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.\n\nNotes:\n * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.\n\n * a live stream may not provide duration information and also return `nan` for this method.\n\n * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:\n ~~~lua\n duration = avplayer:duration()\n if type(duration) == \"number\" and duration ~= duration then\n     -- the duration is equal to `nan`\n end\n~~~",
        "stripped_doc" : [
          "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
          ""
        ],
        "def" : "hs._asm.avplayer:duration() -> number | nil",
        "name" : "duration",
        "notes" : [
          " * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.",
          "",
          " * a live stream may not provide duration information and also return `nan` for this method.",
          "",
          " * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:",
          " ~~~lua",
          " duration = avplayer:duration()",
          " if type(duration) == \"number\" and duration ~= duration then",
          "     -- the duration is equal to `nan`",
          " end",
          "~~~"
        ],
        "signature" : "hs._asm.avplayer:duration() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.",
          ""
        ],
        "desc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.\n\nNotes:\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:externalPlayback() -> Boolean",
        "name" : "externalPlayback",
        "notes" : [
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.avplayer:externalPlayback() -> Boolean",
        "type" : "Method",
        "returns" : [
          " * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.",
          ""
        ],
        "desc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Flashes the number and optional string over the media playback display momentarily.\n\nParameters:\n * `number` - an integer specifying the chapter number to display.\n * `string` - an optional string specifying the chapter name to display.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed.",
        "stripped_doc" : [
          "Flashes the number and optional string over the media playback display momentarily.",
          ""
        ],
        "def" : "hs._asm.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "name" : "flashChapterAndTitle",
        "notes" : [
          " * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed."
        ],
        "signature" : "hs._asm.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Flashes the number and optional string over the media playback display momentarily.",
        "parameters" : [
          " * `number` - an integer specifying the chapter number to display.",
          " * `string` - an optional string specifying the chapter name to display.",
          ""
        ]
      },
      {
        "doc" : "Get or set the frame of the avplayer window.\n\nParameters:\n * rect - An optional rect-table containing the co-ordinates and size the avplayer window should be moved and set to\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * a rect-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer window (keys `x`  and `y`) and the new size (keys `h` and `w`).  The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object.",
        "stripped_doc" : [
          "Get or set the frame of the avplayer window.",
          ""
        ],
        "def" : "hs._asm.avplayer:frame([rect]) -> avplayerObject | currentValue",
        "name" : "frame",
        "notes" : [
          " * a rect-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer window (keys `x`  and `y`) and the new size (keys `h` and `w`).  The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object."
        ],
        "signature" : "hs._asm.avplayer:frame([rect]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the frame of the avplayer window.",
        "parameters" : [
          " * rect - An optional rect-table containing the co-ordinates and size the avplayer window should be moved and set to",
          ""
        ]
      },
      {
        "doc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
          ""
        ],
        "def" : "hs._asm.avplayer:frameSteppingButtons([state]) -> avplayerObject | current value",
        "name" : "frameSteppingButtons",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:frameSteppingButtons([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the full screen toggle button should be included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the full screen toggle button should be included in the media controls.",
          ""
        ],
        "def" : "hs._asm.avplayer:fullScreenButton([state]) -> avplayerObject | current value",
        "name" : "fullScreenButton",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:fullScreenButton([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the full screen toggle button should be included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Hides the avplayer object\n\nParameters:\n * None\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Hides the avplayer object",
          ""
        ],
        "def" : "hs._asm.avplayer:hide() -> avplayerObject",
        "name" : "hide",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:hide() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Hides the avplayer object",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the avplayer can accept keyboard input for playback control. Defaults to false.\n\nParameters:\n * `value` - an optional boolean value which sets whether or not the avplayer will accept keyboard input.\n\nReturns:\n * If a value is provided, then this method returns the avplayer object; otherwise the current value",
        "stripped_doc" : [
          "Get or set whether or not the avplayer can accept keyboard input for playback control. Defaults to false.",
          ""
        ],
        "def" : "hs._asm.avplayer:keyboardControl([value]) -> avplayerObject | current value",
        "name" : "keyboardControl",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:keyboardControl([value]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * If a value is provided, then this method returns the avplayer object; otherwise the current value"
        ],
        "desc" : "Get or set whether or not the avplayer can accept keyboard input for playback control. Defaults to false.",
        "parameters" : [
          " * `value` - an optional boolean value which sets whether or not the avplayer will accept keyboard input.",
          ""
        ]
      },
      {
        "doc" : "Get or set the window level\n\nParameters:\n * `theLevel` - an optional parameter specifying the desired level as an integer or string. If it is a string, it must match one of the keys in `hs.canvas.windowLevels`.\n\nReturns:\n * if a parameter is specified, returns the avplayer object, otherwise the current value\n\nNotes:\n * see the notes for `hs.drawing.windowLevels`",
        "stripped_doc" : [
          "Get or set the window level",
          ""
        ],
        "def" : "hs._asm.avplayer:level([theLevel]) -> drawingObject | currentValue",
        "name" : "level",
        "notes" : [
          " * see the notes for `hs.drawing.windowLevels`"
        ],
        "signature" : "hs._asm.avplayer:level([theLevel]) -> drawingObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * if a parameter is specified, returns the avplayer object, otherwise the current value",
          ""
        ],
        "desc" : "Get or set the window level",
        "parameters" : [
          " * `theLevel` - an optional parameter specifying the desired level as an integer or string. If it is a string, it must match one of the keys in `hs.canvas.windowLevels`.",
          ""
        ]
      },
      {
        "doc" : "Load the specified resource for playback.\n\nParameters:\n * `path` - a string specifying the file path or URL to the audiovisual resource.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.avplayer:play](#play) or [hs._asm.avplayer:rate](#rate) to begin playback.\n\n * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.avplayer:status](#status) will return \"failed\".\n * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed.",
        "stripped_doc" : [
          "Load the specified resource for playback.",
          ""
        ],
        "def" : "hs._asm.avplayer:load(path) -> avplayerObject",
        "name" : "load",
        "notes" : [
          " * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.avplayer:play](#play) or [hs._asm.avplayer:rate](#rate) to begin playback.",
          "",
          " * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.avplayer:status](#status) will return \"failed\".",
          " * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed."
        ],
        "signature" : "hs._asm.avplayer:load(path) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Load the specified resource for playback.",
        "parameters" : [
          " * `path` - a string specifying the file path or URL to the audiovisual resource.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not audio output is muted for the audovisual media item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not audio output is muted for the audovisual media item.",
          ""
        ],
        "def" : "hs._asm.avplayer:mute([state]) -> avplayerObject | current value",
        "name" : "mute",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:mute([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not audio output is muted for the audovisual media item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Moves avplayer object above avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.\n\nParameters:\n * `avplayer2` -An optional avplayer object to place the avplayer object above.\n\nReturns:\n * The avplayer object\n\nNotes:\n * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level).",
        "stripped_doc" : [
          "Moves avplayer object above avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
          ""
        ],
        "def" : "hs._asm.avplayer:orderAbove([avplayer2]) -> avplayerObject",
        "name" : "orderAbove",
        "notes" : [
          " * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level)."
        ],
        "signature" : "hs._asm.avplayer:orderAbove([avplayer2]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object",
          ""
        ],
        "desc" : "Moves avplayer object above avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
        "parameters" : [
          " * `avplayer2` -An optional avplayer object to place the avplayer object above.",
          ""
        ]
      },
      {
        "doc" : "Moves avplayer object below avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.\n\nParameters:\n * `avplayer2` -An optional avplayer object to place the avplayer object below.\n\nReturns:\n * The avplayer object\n\nNotes:\n * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level).",
        "stripped_doc" : [
          "Moves avplayer object below avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
          ""
        ],
        "def" : "hs._asm.avplayer:orderBelow([avplayer2]) -> avplayerObject",
        "name" : "orderBelow",
        "notes" : [
          " * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level)."
        ],
        "signature" : "hs._asm.avplayer:orderBelow([avplayer2]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object",
          ""
        ],
        "desc" : "Moves avplayer object below avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
        "parameters" : [
          " * `avplayer2` -An optional avplayer object to place the avplayer object below.",
          ""
        ]
      },
      {
        "doc" : "Pause the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 0.0 (see [hs._asm.avplayer:rate(0.0)](#rate)`)",
        "stripped_doc" : [
          "Pause the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:pause() -> avplayerObject",
        "name" : "pause",
        "notes" : [
          " * this is equivalent to setting the rate to 0.0 (see [hs._asm.avplayer:rate(0.0)](#rate)`)"
        ],
        "signature" : "hs._asm.avplayer:pause() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Pause the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
          ""
        ],
        "def" : "hs._asm.avplayer:pauseWhenHidden([state]) -> avplayerObject | current value",
        "name" : "pauseWhenHidden",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:pauseWhenHidden([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.",
          ""
        ]
      },
      {
        "doc" : "Play the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 1.0 (see [hs._asm.avplayer:rate(1.0)](#rate)`)",
        "stripped_doc" : [
          "Play the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:play([fromBeginning]) -> avplayerObject",
        "name" : "play",
        "notes" : [
          " * this is equivalent to setting the rate to 1.0 (see [hs._asm.avplayer:rate(1.0)](#rate)`)"
        ],
        "signature" : "hs._asm.avplayer:play([fromBeginning]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Play the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.",
          ""
        ]
      },
      {
        "doc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.\n\nParameters:\n * None\n\nReturns:\n * a table containing the following media characteristics, or `nil` if no media content is currently loaded:\n   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.\n   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.\n   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.\n   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.\n   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.\n   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.\n   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.\n   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0.",
        "stripped_doc" : [
          "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.avplayer:playbackInformation() -> table | nil",
        "name" : "playbackInformation",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:playbackInformation() -> table | nil",
        "type" : "Method",
        "returns" : [
          " * a table containing the following media characteristics, or `nil` if no media content is currently loaded:",
          "   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.",
          "   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.",
          "   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.",
          "   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.",
          "   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.",
          "   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.",
          "   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.",
          "   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0."
        ],
        "desc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.\n\nParameters:\n * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.avplayer:mute](#mute).\n * A value of 0.0 is equivalent to [hs._asm.avplayer:pause](#pause).\n * A value of 1.0 is equivalent to [hs._asm.avplayer:play](#play).\n\n * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:\n   * Rates between 0.0 and 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field\n   * Rates greater than 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field\n   * The item can be played in reverse (a rate of -1.0) if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field\n   * Rates between 0.0 and -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field\n   * Rates less than -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field",
        "stripped_doc" : [
          "Get or set the rate of playback for the audiovisual content of the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:rate([rate]) -> avplayerObject | current value",
        "name" : "rate",
        "notes" : [
          " * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.avplayer:mute](#mute).",
          " * A value of 0.0 is equivalent to [hs._asm.avplayer:pause](#pause).",
          " * A value of 1.0 is equivalent to [hs._asm.avplayer:play](#play).",
          "",
          " * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:",
          "   * Rates between 0.0 and 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field",
          "   * Rates greater than 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field",
          "   * The item can be played in reverse (a rate of -1.0) if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field",
          "   * Rates between 0.0 and -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field",
          "   * Rates less than -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field"
        ],
        "signature" : "hs._asm.avplayer:rate([rate]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.",
        "parameters" : [
          " * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.",
          ""
        ]
      },
      {
        "doc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.\n\nParameters:\n * `time`     - the location, in seconds, within the audiovisual content to seek to.\n * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.\n\nReturns:\n * the avplayerObject, or nil if no media content is currently loaded\n\nNotes:\n * If you specify `callback` as true, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"seek\"\n   * the current time, in seconds, specifying the current playback position in the media content\n   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request).",
        "stripped_doc" : [
          "Jumps to the specified location in the audiovisual content currently loaded into the player.",
          ""
        ],
        "def" : "hs._asm.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "name" : "seek",
        "notes" : [
          " * If you specify `callback` as true, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"seek\"",
          "   * the current time, in seconds, specifying the current playback position in the media content",
          "   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request)."
        ],
        "signature" : "hs._asm.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject, or nil if no media content is currently loaded",
          ""
        ],
        "desc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.",
        "parameters" : [
          " * `time`     - the location, in seconds, within the audiovisual content to seek to.",
          " * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.",
          ""
        ]
      },
      {
        "doc" : "Places the avplayer object behind normal windows, between the desktop wallpaper and desktop icons\n\nParameters:\n * None\n\nReturns:\n * The drawing object",
        "stripped_doc" : [
          "Places the avplayer object behind normal windows, between the desktop wallpaper and desktop icons",
          ""
        ],
        "def" : "hs._asm.avplayer:sendToBack() -> avplayerObject",
        "name" : "sendToBack",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:sendToBack() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The drawing object"
        ],
        "desc" : "Places the avplayer object behind normal windows, between the desktop wallpaper and desktop icons",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Set the callback function for the avplayerObject.\n\nParameters:\n * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * The callback function should expect 2 or more arguments.  The first two arguments will always be:\n   * `avplayObject` - the avplayerObject userdata\n   * `message`      - a string specifying the reason for the callback.\n * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:\n   * `actionMenu` - [hs._asm.avplayer:actionMenu](#actionMenu)\n   * `finished`   - [hs._asm.avplayer:trackCompleted](#trackCompleted)\n   * `pause`      - [hs._asm.avplayer:trackRate](#trackRate)\n   * `play`       - [hs._asm.avplayer:trackRate](#trackRate)\n   * `progress`   - [hs._asm.avplayer:trackProgress](#trackProgress)\n   * `seek`       - [hs._asm.avplayer:seek](#seek)\n   * `status`     - [hs._asm.avplayer:trackStatus](#trackStatus)",
        "stripped_doc" : [
          "Set the callback function for the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.avplayer:setCallback(fn) -> avplayerObject",
        "name" : "setCallback",
        "notes" : [
          " * The callback function should expect 2 or more arguments.  The first two arguments will always be:",
          "   * `avplayObject` - the avplayerObject userdata",
          "   * `message`      - a string specifying the reason for the callback.",
          " * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:",
          "   * `actionMenu` - [hs._asm.avplayer:actionMenu](#actionMenu)",
          "   * `finished`   - [hs._asm.avplayer:trackCompleted](#trackCompleted)",
          "   * `pause`      - [hs._asm.avplayer:trackRate](#trackRate)",
          "   * `play`       - [hs._asm.avplayer:trackRate](#trackRate)",
          "   * `progress`   - [hs._asm.avplayer:trackProgress](#trackProgress)",
          "   * `seek`       - [hs._asm.avplayer:seek](#seek)",
          "   * `status`     - [hs._asm.avplayer:trackStatus](#trackStatus)"
        ],
        "signature" : "hs._asm.avplayer:setCallback(fn) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Set the callback function for the avplayerObject.",
        "parameters" : [
          " * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the avplayer window has shadows. Default to false.\n\nParameters:\n * `value` - an optional boolean value indicating whether or not the avplayer should have shadows.\n\nReturns:\n * If a value is provided, then this method returns the avplayer object; otherwise the current value",
        "stripped_doc" : [
          "Get or set whether or not the avplayer window has shadows. Default to false.",
          ""
        ],
        "def" : "hs._asm.avplayer:shadow([value]) -> avplayerObject | current value",
        "name" : "shadow",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:shadow([value]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * If a value is provided, then this method returns the avplayer object; otherwise the current value"
        ],
        "desc" : "Get or set whether or not the avplayer window has shadows. Default to false.",
        "parameters" : [
          " * `value` - an optional boolean value indicating whether or not the avplayer should have shadows.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the sharing services button is included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the sharing services button is included in the media controls.",
          ""
        ],
        "def" : "hs._asm.avplayer:sharingServiceButton([state]) -> avplayerObject | current value",
        "name" : "sharingServiceButton",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:sharingServiceButton([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the sharing services button is included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Displays the avplayer object\n\nParameters:\n * None\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Displays the avplayer object",
          ""
        ],
        "def" : "hs._asm.avplayer:show() -> avplayerObject",
        "name" : "show",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:show() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Displays the avplayer object",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the size of a avplayer window\n\nParameters:\n * `size` - An optional size-table specifying the width and height the avplayer window should be resized to\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the avplayer should be resized to. The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object.",
        "stripped_doc" : [
          "Get or set the size of a avplayer window",
          ""
        ],
        "def" : "hs._asm.avplayer:size([size]) -> avplayerObject | currentValue",
        "name" : "size",
        "notes" : [
          " * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the avplayer should be resized to. The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object."
        ],
        "signature" : "hs._asm.avplayer:size([size]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the size of a avplayer window",
        "parameters" : [
          " * `size` - An optional size-table specifying the width and height the avplayer window should be resized to",
          ""
        ]
      },
      {
        "doc" : "Returns the current status of the media content loaded for playback.\n\nParameters:\n * None\n\nReturns:\n * One of the following status strings, or `nil` if no media content is currently loaded:\n   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.\n   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin\n   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error.",
        "stripped_doc" : [
          "Returns the current status of the media content loaded for playback.",
          ""
        ],
        "def" : "hs._asm.avplayer:status() -> status[, error] | nil",
        "name" : "status",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:status() -> status[, error] | nil",
        "type" : "Method",
        "returns" : [
          " * One of the following status strings, or `nil` if no media content is currently loaded:",
          "   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.",
          "   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin",
          "   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error."
        ],
        "desc" : "Returns the current status of the media content loaded for playback.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the current position in seconds within the audiovisual media content.\n\nParameters:\n * None\n\nReturns:\n * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded.",
        "stripped_doc" : [
          "Returns the current position in seconds within the audiovisual media content.",
          ""
        ],
        "def" : "hs._asm.avplayer:time() -> number | nil",
        "name" : "time",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:time() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded."
        ],
        "desc" : "Returns the current position in seconds within the audiovisual media content.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the top-left coordinate of the avplayer window\n\nParameters:\n * `point` - An optional point-table specifying the new coordinate the top-left of the avplayer window should be moved to\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * a point-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer (keys `x`  and `y`). The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object.",
        "stripped_doc" : [
          "Get or set the top-left coordinate of the avplayer window",
          ""
        ],
        "def" : "hs._asm.avplayer:topLeft([point]) -> avplayerObject | currentValue",
        "name" : "topLeft",
        "notes" : [
          " * a point-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer (keys `x`  and `y`). The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object."
        ],
        "signature" : "hs._asm.avplayer:topLeft([point]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the top-left coordinate of the avplayer window",
        "parameters" : [
          " * `point` - An optional point-table specifying the new coordinate the top-left of the avplayer window should be moved to",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:\n   * the avplayerObject\n   * \"finished\"",
        "stripped_doc" : [
          "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
          ""
        ],
        "def" : "hs._asm.avplayer:trackCompleted([state]) -> avplayerObject | current value",
        "name" : "trackCompleted",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:",
          "   * the avplayerObject",
          "   * \"finished\""
        ],
        "signature" : "hs._asm.avplayer:trackCompleted([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a periodic callback at the interval specified.\n\nParameters:\n * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"progress\"\n   * the time in seconds specifying the current location in the media playback.\n\n * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface.",
        "stripped_doc" : [
          "Enable or disable a periodic callback at the interval specified.",
          ""
        ],
        "def" : "hs._asm.avplayer:trackProgress([number | nil]) -> avplayerObject | current value",
        "name" : "trackProgress",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"progress\"",
          "   * the time in seconds specifying the current location in the media playback.",
          "",
          " * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface."
        ],
        "signature" : "hs._asm.avplayer:trackProgress([number | nil]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.",
          ""
        ],
        "desc" : "Enable or disable a periodic callback at the interval specified.",
        "parameters" : [
          " * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the rate of playback changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value\n   * the rate that the playback was changed to.\n\n * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the rate of playback changes.",
          ""
        ],
        "def" : "hs._asm.avplayer:trackRate([state]) -> avplayerObject | current value",
        "name" : "trackRate",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value",
          "   * the rate that the playback was changed to.",
          "",
          " * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information."
        ],
        "signature" : "hs._asm.avplayer:trackRate([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the rate of playback changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the status of loading a media item changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"status\"\n   * a string matching one of the states described in [hs._asm.avplayer:status](#status)\n   * if the state reported is failed, an error message describing the error that occurred.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the status of loading a media item changes.",
          ""
        ],
        "def" : "hs._asm.avplayer:trackStatus([state]) -> avplayerObject | current value",
        "name" : "trackStatus",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"status\"",
          "   * a string matching one of the states described in [hs._asm.avplayer:status](#status)",
          "   * if the state reported is failed, an error message describing the error that occurred."
        ],
        "signature" : "hs._asm.avplayer:trackStatus([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the status of loading a media item changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..",
          ""
        ]
      },
      {
        "doc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).\n\nParameters:\n * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
          ""
        ],
        "def" : "hs._asm.avplayer:volume([volume]) -> avplayerObject | current value",
        "name" : "volume",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:volume([volume]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
        "parameters" : [
          " * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.",
          ""
        ]
      },
      {
        "doc" : "Set or clear a callback for updates to the avplayer window\n\nParameters:\n * `fn` - the function to be called when the avplayer window is moved or closed. Specify an explicit nil to clear the current callback.  The function should expect 2 or 3 arguments and return none.  The arguments will be one of the following:\n\n   * \"closing\", avplayer - specifies that the avplayer window is being closed, either by the user or with the [hs._asm.avplayer:delete](#delete) method.\n     * `action`   - in this case \"closing\", specifying that the avplayer window is being closed\n     * `avplayer` - the avplayer that is being closed\n\n   * \"focusChange\", avplayer, state - indicates that the avplayer window has either become or stopped being the focused window\n     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed\n     * `avplayer` - the avplayer that is being closed\n     * `state`    - a boolean, true if the avplayer has become the focused window, or false if it has lost focus\n\n   * \"frameChange\", avplayer, frame - indicates that the avplayer window has been moved or resized\n     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed\n     * `avplayer` - the avplayer that is being closed\n     * `frame`    - a rect-table containing the new co-ordinates and size of the avplayer window\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Set or clear a callback for updates to the avplayer window",
          ""
        ],
        "def" : "hs._asm.avplayer:windowCallback(fn) -> avplayerObject",
        "name" : "windowCallback",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:windowCallback(fn) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Set or clear a callback for updates to the avplayer window",
        "parameters" : [
          " * `fn` - the function to be called when the avplayer window is moved or closed. Specify an explicit nil to clear the current callback.  The function should expect 2 or 3 arguments and return none.  The arguments will be one of the following:",
          "",
          "   * \"closing\", avplayer - specifies that the avplayer window is being closed, either by the user or with the [hs._asm.avplayer:delete](#delete) method.",
          "     * `action`   - in this case \"closing\", specifying that the avplayer window is being closed",
          "     * `avplayer` - the avplayer that is being closed",
          "",
          "   * \"focusChange\", avplayer, state - indicates that the avplayer window has either become or stopped being the focused window",
          "     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed",
          "     * `avplayer` - the avplayer that is being closed",
          "     * `state`    - a boolean, true if the avplayer has become the focused window, or false if it has lost focus",
          "",
          "   * \"frameChange\", avplayer, frame - indicates that the avplayer window has been moved or resized",
          "     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed",
          "     * `avplayer` - the avplayer that is being closed",
          "     * `frame`    - a rect-table containing the new co-ordinates and size of the avplayer window",
          ""
        ]
      },
      {
        "doc" : "Get or set the window display style\n\nParameters:\n * mask - if present, this mask should be a combination of values found in `hs.webview.windowMasks` describing the window style.  The mask should be provided as one of the following:\n   * integer - a number representing the style which can be created by combining values found in `hs.webview.windowMasks` with the logical or operator.\n   * string  - a single key from `hs.webview.windowMasks` which will be toggled in the current window style.\n   * table   - a list of keys from `hs.webview.windowMasks` which will be combined to make the final style by combining their values with the logical or operator.\n\nReturns:\n * if a mask is provided, then the avplayerObject is returned; otherwise the current mask value is returned.",
        "stripped_doc" : [
          "Get or set the window display style",
          ""
        ],
        "def" : "hs._asm.avplayer:windowStyle(mask) -> avplayerObject | currentMask",
        "name" : "windowStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:windowStyle(mask) -> avplayerObject | currentMask",
        "type" : "Method",
        "returns" : [
          " * if a mask is provided, then the avplayerObject is returned; otherwise the current mask value is returned."
        ],
        "desc" : "Get or set the window display style",
        "parameters" : [
          " * mask - if present, this mask should be a combination of values found in `hs.webview.windowMasks` describing the window style.  The mask should be provided as one of the following:",
          "   * integer - a number representing the style which can be created by combining values found in `hs.webview.windowMasks` with the logical or operator.",
          "   * string  - a single key from `hs.webview.windowMasks` which will be toggled in the current window style.",
          "   * table   - a list of keys from `hs.webview.windowMasks` which will be combined to make the final style by combining their values with the logical or operator.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "doc" : "Get or set the frame of the avplayer window.\n\nParameters:\n * rect - An optional rect-table containing the co-ordinates and size the avplayer window should be moved and set to\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * a rect-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer window (keys `x`  and `y`) and the new size (keys `h` and `w`).  The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object.",
        "stripped_doc" : [
          "Get or set the frame of the avplayer window.",
          ""
        ],
        "def" : "hs._asm.avplayer:frame([rect]) -> avplayerObject | currentValue",
        "name" : "frame",
        "notes" : [
          " * a rect-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer window (keys `x`  and `y`) and the new size (keys `h` and `w`).  The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object."
        ],
        "signature" : "hs._asm.avplayer:frame([rect]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the frame of the avplayer window.",
        "parameters" : [
          " * rect - An optional rect-table containing the co-ordinates and size the avplayer window should be moved and set to",
          ""
        ]
      },
      {
        "doc" : "Get or set the window display style\n\nParameters:\n * mask - if present, this mask should be a combination of values found in `hs.webview.windowMasks` describing the window style.  The mask should be provided as one of the following:\n   * integer - a number representing the style which can be created by combining values found in `hs.webview.windowMasks` with the logical or operator.\n   * string  - a single key from `hs.webview.windowMasks` which will be toggled in the current window style.\n   * table   - a list of keys from `hs.webview.windowMasks` which will be combined to make the final style by combining their values with the logical or operator.\n\nReturns:\n * if a mask is provided, then the avplayerObject is returned; otherwise the current mask value is returned.",
        "stripped_doc" : [
          "Get or set the window display style",
          ""
        ],
        "def" : "hs._asm.avplayer:windowStyle(mask) -> avplayerObject | currentMask",
        "name" : "windowStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:windowStyle(mask) -> avplayerObject | currentMask",
        "type" : "Method",
        "returns" : [
          " * if a mask is provided, then the avplayerObject is returned; otherwise the current mask value is returned."
        ],
        "desc" : "Get or set the window display style",
        "parameters" : [
          " * mask - if present, this mask should be a combination of values found in `hs.webview.windowMasks` describing the window style.  The mask should be provided as one of the following:",
          "   * integer - a number representing the style which can be created by combining values found in `hs.webview.windowMasks` with the logical or operator.",
          "   * string  - a single key from `hs.webview.windowMasks` which will be toggled in the current window style.",
          "   * table   - a list of keys from `hs.webview.windowMasks` which will be combined to make the final style by combining their values with the logical or operator.",
          ""
        ]
      },
      {
        "doc" : "Get or set the window level\n\nParameters:\n * `theLevel` - an optional parameter specifying the desired level as an integer or string. If it is a string, it must match one of the keys in `hs.canvas.windowLevels`.\n\nReturns:\n * if a parameter is specified, returns the avplayer object, otherwise the current value\n\nNotes:\n * see the notes for `hs.drawing.windowLevels`",
        "stripped_doc" : [
          "Get or set the window level",
          ""
        ],
        "def" : "hs._asm.avplayer:level([theLevel]) -> drawingObject | currentValue",
        "name" : "level",
        "notes" : [
          " * see the notes for `hs.drawing.windowLevels`"
        ],
        "signature" : "hs._asm.avplayer:level([theLevel]) -> drawingObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * if a parameter is specified, returns the avplayer object, otherwise the current value",
          ""
        ],
        "desc" : "Get or set the window level",
        "parameters" : [
          " * `theLevel` - an optional parameter specifying the desired level as an integer or string. If it is a string, it must match one of the keys in `hs.canvas.windowLevels`.",
          ""
        ]
      },
      {
        "doc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.\n\nParameters:\n * `behavior` - if present, the behavior should be a combination of values found in `hs.canvas.windowBehaviors` describing the window behavior.  The behavior should be specified as one of the following:\n   * integer - a number representing the behavior which can be created by combining values found in `hs.canvas.windowBehaviors` with the logical or operator.\n   * string  - a single key from `hs.canvas.windowBehaviors` which will be toggled in the current window behavior.\n   * table   - a list of keys from `hs.canvas.windowBehaviors` which will be combined to make the final behavior by combining their values with the logical or operator.\n\nReturns:\n * if an argument is provided, then the avplayerObject is returned; otherwise the current behavior value is returned.",
        "stripped_doc" : [
          "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
          ""
        ],
        "def" : "hs._asm.avplayer:behavior([behavior]) -> avplayerObject | currentValue",
        "name" : "behavior",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:behavior([behavior]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, then the avplayerObject is returned; otherwise the current behavior value is returned."
        ],
        "desc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
        "parameters" : [
          " * `behavior` - if present, the behavior should be a combination of values found in `hs.canvas.windowBehaviors` describing the window behavior.  The behavior should be specified as one of the following:",
          "   * integer - a number representing the behavior which can be created by combining values found in `hs.canvas.windowBehaviors` with the logical or operator.",
          "   * string  - a single key from `hs.canvas.windowBehaviors` which will be toggled in the current window behavior.",
          "   * table   - a list of keys from `hs.canvas.windowBehaviors` which will be combined to make the final behavior by combining their values with the logical or operator.",
          ""
        ]
      },
      {
        "doc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.\n\nParameters:\n * behaviorTable - an optional table of strings and\/or numbers specifying the desired window behavior for the avplayer object.\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * Window behaviors determine how the avplayer object is handled by Spaces and Exposé. See `hs.canvas.windowBehaviors` for more information.",
        "stripped_doc" : [
          "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
          ""
        ],
        "def" : "hs._asm.avplayer:behaviorAsLabels(behaviorTable) -> avplayerObject | currentValue",
        "name" : "behaviorAsLabels",
        "notes" : [
          " * Window behaviors determine how the avplayer object is handled by Spaces and Exposé. See `hs.canvas.windowBehaviors` for more information."
        ],
        "signature" : "hs._asm.avplayer:behaviorAsLabels(behaviorTable) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the window behavior settings for the avplayer object using labels defined in `hs.canvas.windowBehaviors`.",
        "parameters" : [
          " * behaviorTable - an optional table of strings and\/or numbers specifying the desired window behavior for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Get or set the top-left coordinate of the avplayer window\n\nParameters:\n * `point` - An optional point-table specifying the new coordinate the top-left of the avplayer window should be moved to\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * a point-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer (keys `x`  and `y`). The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object.",
        "stripped_doc" : [
          "Get or set the top-left coordinate of the avplayer window",
          ""
        ],
        "def" : "hs._asm.avplayer:topLeft([point]) -> avplayerObject | currentValue",
        "name" : "topLeft",
        "notes" : [
          " * a point-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the avplayer (keys `x`  and `y`). The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object."
        ],
        "signature" : "hs._asm.avplayer:topLeft([point]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the top-left coordinate of the avplayer window",
        "parameters" : [
          " * `point` - An optional point-table specifying the new coordinate the top-left of the avplayer window should be moved to",
          ""
        ]
      },
      {
        "doc" : "Get or set the size of a avplayer window\n\nParameters:\n * `size` - An optional size-table specifying the width and height the avplayer window should be resized to\n\nReturns:\n * If an argument is provided, the avplayer object; otherwise the current value.\n\nNotes:\n * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the avplayer should be resized to. The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object.",
        "stripped_doc" : [
          "Get or set the size of a avplayer window",
          ""
        ],
        "def" : "hs._asm.avplayer:size([size]) -> avplayerObject | currentValue",
        "name" : "size",
        "notes" : [
          " * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the avplayer should be resized to. The table may be crafted by any method which includes these keys, including the use of an `hs.geometry` object."
        ],
        "signature" : "hs._asm.avplayer:size([size]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the avplayer object; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the size of a avplayer window",
        "parameters" : [
          " * `size` - An optional size-table specifying the width and height the avplayer window should be resized to",
          ""
        ]
      },
      {
        "doc" : "Displays the avplayer object\n\nParameters:\n * None\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Displays the avplayer object",
          ""
        ],
        "def" : "hs._asm.avplayer:show() -> avplayerObject",
        "name" : "show",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:show() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Displays the avplayer object",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Hides the avplayer object\n\nParameters:\n * None\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Hides the avplayer object",
          ""
        ],
        "def" : "hs._asm.avplayer:hide() -> avplayerObject",
        "name" : "hide",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:hide() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Hides the avplayer object",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the avplayer can accept keyboard input for playback control. Defaults to false.\n\nParameters:\n * `value` - an optional boolean value which sets whether or not the avplayer will accept keyboard input.\n\nReturns:\n * If a value is provided, then this method returns the avplayer object; otherwise the current value",
        "stripped_doc" : [
          "Get or set whether or not the avplayer can accept keyboard input for playback control. Defaults to false.",
          ""
        ],
        "def" : "hs._asm.avplayer:keyboardControl([value]) -> avplayerObject | current value",
        "name" : "keyboardControl",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:keyboardControl([value]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * If a value is provided, then this method returns the avplayer object; otherwise the current value"
        ],
        "desc" : "Get or set whether or not the avplayer can accept keyboard input for playback control. Defaults to false.",
        "parameters" : [
          " * `value` - an optional boolean value which sets whether or not the avplayer will accept keyboard input.",
          ""
        ]
      },
      {
        "doc" : "Places the drawing object on top of normal windows\n\nParameters:\n * `aboveEverything` - An optional boolean value that controls how far to the front the avplayer should be placed. True to place the avplayer on top of all windows (including the dock and menubar and fullscreen windows), false to place the avplayer above normal windows, but below the dock, menubar and fullscreen windows. Defaults to false.\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Places the drawing object on top of normal windows",
          ""
        ],
        "def" : "hs._asm.avplayer:bringToFront([aboveEverything]) -> avplayerObject",
        "name" : "bringToFront",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:bringToFront([aboveEverything]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Places the drawing object on top of normal windows",
        "parameters" : [
          " * `aboveEverything` - An optional boolean value that controls how far to the front the avplayer should be placed. True to place the avplayer on top of all windows (including the dock and menubar and fullscreen windows), false to place the avplayer above normal windows, but below the dock, menubar and fullscreen windows. Defaults to false.",
          ""
        ]
      },
      {
        "doc" : "Places the avplayer object behind normal windows, between the desktop wallpaper and desktop icons\n\nParameters:\n * None\n\nReturns:\n * The drawing object",
        "stripped_doc" : [
          "Places the avplayer object behind normal windows, between the desktop wallpaper and desktop icons",
          ""
        ],
        "def" : "hs._asm.avplayer:sendToBack() -> avplayerObject",
        "name" : "sendToBack",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:sendToBack() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The drawing object"
        ],
        "desc" : "Places the avplayer object behind normal windows, between the desktop wallpaper and desktop icons",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the alpha level of the window containing the hs._asm.avplayer object.\n\nParameters:\n * `alpha` - an optional number between 0.0 and 1.0 specifying the new alpha level for the avplayer.\n\nReturns:\n * If a parameter is provided, returns the avplayer object; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the alpha level of the window containing the hs._asm.avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:alpha([alpha]) -> avplayerObject | currentValue",
        "name" : "alpha",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:alpha([alpha]) -> avplayerObject | currentValue",
        "type" : "Method",
        "returns" : [
          " * If a parameter is provided, returns the avplayer object; otherwise returns the current value."
        ],
        "desc" : "Get or set the alpha level of the window containing the hs._asm.avplayer object.",
        "parameters" : [
          " * `alpha` - an optional number between 0.0 and 1.0 specifying the new alpha level for the avplayer.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the avplayer window has shadows. Default to false.\n\nParameters:\n * `value` - an optional boolean value indicating whether or not the avplayer should have shadows.\n\nReturns:\n * If a value is provided, then this method returns the avplayer object; otherwise the current value",
        "stripped_doc" : [
          "Get or set whether or not the avplayer window has shadows. Default to false.",
          ""
        ],
        "def" : "hs._asm.avplayer:shadow([value]) -> avplayerObject | current value",
        "name" : "shadow",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:shadow([value]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * If a value is provided, then this method returns the avplayer object; otherwise the current value"
        ],
        "desc" : "Get or set whether or not the avplayer window has shadows. Default to false.",
        "parameters" : [
          " * `value` - an optional boolean value indicating whether or not the avplayer should have shadows.",
          ""
        ]
      },
      {
        "doc" : "Moves avplayer object above avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.\n\nParameters:\n * `avplayer2` -An optional avplayer object to place the avplayer object above.\n\nReturns:\n * The avplayer object\n\nNotes:\n * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level).",
        "stripped_doc" : [
          "Moves avplayer object above avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
          ""
        ],
        "def" : "hs._asm.avplayer:orderAbove([avplayer2]) -> avplayerObject",
        "name" : "orderAbove",
        "notes" : [
          " * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level)."
        ],
        "signature" : "hs._asm.avplayer:orderAbove([avplayer2]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object",
          ""
        ],
        "desc" : "Moves avplayer object above avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
        "parameters" : [
          " * `avplayer2` -An optional avplayer object to place the avplayer object above.",
          ""
        ]
      },
      {
        "doc" : "Moves avplayer object below avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.\n\nParameters:\n * `avplayer2` -An optional avplayer object to place the avplayer object below.\n\nReturns:\n * The avplayer object\n\nNotes:\n * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level).",
        "stripped_doc" : [
          "Moves avplayer object below avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
          ""
        ],
        "def" : "hs._asm.avplayer:orderBelow([avplayer2]) -> avplayerObject",
        "name" : "orderBelow",
        "notes" : [
          " * If the avplayer object and avplayer2 are not at the same presentation level, this method will will move the avplayer object as close to the desired relationship without changing the avplayer object's presentation level. See [hs._asm.avplayer.level](#level)."
        ],
        "signature" : "hs._asm.avplayer:orderBelow([avplayer2]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object",
          ""
        ],
        "desc" : "Moves avplayer object below avplayer2, or all avplayer objects in the same presentation level, if avplayer2 is not given.",
        "parameters" : [
          " * `avplayer2` -An optional avplayer object to place the avplayer object below.",
          ""
        ]
      },
      {
        "doc" : "Destroys the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * nil\n\nNotes:\n * This method is automatically called during garbage collection, notably during a Hammerspoon termination or reload",
        "stripped_doc" : [
          "Destroys the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:delete() -> nil",
        "name" : "delete",
        "notes" : [
          " * This method is automatically called during garbage collection, notably during a Hammerspoon termination or reload"
        ],
        "signature" : "hs._asm.avplayer:delete() -> nil",
        "type" : "Method",
        "returns" : [
          " * nil",
          ""
        ],
        "desc" : "Destroys the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Set or clear a callback for updates to the avplayer window\n\nParameters:\n * `fn` - the function to be called when the avplayer window is moved or closed. Specify an explicit nil to clear the current callback.  The function should expect 2 or 3 arguments and return none.  The arguments will be one of the following:\n\n   * \"closing\", avplayer - specifies that the avplayer window is being closed, either by the user or with the [hs._asm.avplayer:delete](#delete) method.\n     * `action`   - in this case \"closing\", specifying that the avplayer window is being closed\n     * `avplayer` - the avplayer that is being closed\n\n   * \"focusChange\", avplayer, state - indicates that the avplayer window has either become or stopped being the focused window\n     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed\n     * `avplayer` - the avplayer that is being closed\n     * `state`    - a boolean, true if the avplayer has become the focused window, or false if it has lost focus\n\n   * \"frameChange\", avplayer, frame - indicates that the avplayer window has been moved or resized\n     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed\n     * `avplayer` - the avplayer that is being closed\n     * `frame`    - a rect-table containing the new co-ordinates and size of the avplayer window\n\nReturns:\n * The avplayer object",
        "stripped_doc" : [
          "Set or clear a callback for updates to the avplayer window",
          ""
        ],
        "def" : "hs._asm.avplayer:windowCallback(fn) -> avplayerObject",
        "name" : "windowCallback",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:windowCallback(fn) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * The avplayer object"
        ],
        "desc" : "Set or clear a callback for updates to the avplayer window",
        "parameters" : [
          " * `fn` - the function to be called when the avplayer window is moved or closed. Specify an explicit nil to clear the current callback.  The function should expect 2 or 3 arguments and return none.  The arguments will be one of the following:",
          "",
          "   * \"closing\", avplayer - specifies that the avplayer window is being closed, either by the user or with the [hs._asm.avplayer:delete](#delete) method.",
          "     * `action`   - in this case \"closing\", specifying that the avplayer window is being closed",
          "     * `avplayer` - the avplayer that is being closed",
          "",
          "   * \"focusChange\", avplayer, state - indicates that the avplayer window has either become or stopped being the focused window",
          "     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed",
          "     * `avplayer` - the avplayer that is being closed",
          "     * `state`    - a boolean, true if the avplayer has become the focused window, or false if it has lost focus",
          "",
          "   * \"frameChange\", avplayer, frame - indicates that the avplayer window has been moved or resized",
          "     * `action`   - in this case \"focusChange\", specifying that the avplayer window is being closed",
          "     * `avplayer` - the avplayer that is being closed",
          "     * `frame`    - a rect-table containing the new co-ordinates and size of the avplayer window",
          ""
        ]
      },
      {
        "doc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.\n\nParameters:\n * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:\n   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.\n   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.\n   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.\n   * `minimal`  - media controls are displayed as a round circle in the center of the media display.\n   * `none`     - no media controls are displayed in the media display.\n   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
          ""
        ],
        "def" : "hs._asm.avplayer:controlsStyle([style]) -> avplayerObject | current value",
        "name" : "controlsStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:controlsStyle([style]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
        "parameters" : [
          " * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:",
          "   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.",
          "   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.",
          "   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.",
          "   * `minimal`  - media controls are displayed as a round circle in the center of the media display.",
          "   * `none`     - no media controls are displayed in the media display.",
          "   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".",
          ""
        ]
      },
      {
        "doc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
          ""
        ],
        "def" : "hs._asm.avplayer:frameSteppingButtons([state]) -> avplayerObject | current value",
        "name" : "frameSteppingButtons",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:frameSteppingButtons([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the sharing services button is included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the sharing services button is included in the media controls.",
          ""
        ],
        "def" : "hs._asm.avplayer:sharingServiceButton([state]) -> avplayerObject | current value",
        "name" : "sharingServiceButton",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:sharingServiceButton([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the sharing services button is included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Flashes the number and optional string over the media playback display momentarily.\n\nParameters:\n * `number` - an integer specifying the chapter number to display.\n * `string` - an optional string specifying the chapter name to display.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed.",
        "stripped_doc" : [
          "Flashes the number and optional string over the media playback display momentarily.",
          ""
        ],
        "def" : "hs._asm.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "name" : "flashChapterAndTitle",
        "notes" : [
          " * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed."
        ],
        "signature" : "hs._asm.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Flashes the number and optional string over the media playback display momentarily.",
        "parameters" : [
          " * `number` - an integer specifying the chapter number to display.",
          " * `string` - an optional string specifying the chapter name to display.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
          ""
        ],
        "def" : "hs._asm.avplayer:pauseWhenHidden([state]) -> avplayerObject | current value",
        "name" : "pauseWhenHidden",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:pauseWhenHidden([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.",
          ""
        ]
      },
      {
        "doc" : "Set the callback function for the avplayerObject.\n\nParameters:\n * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * The callback function should expect 2 or more arguments.  The first two arguments will always be:\n   * `avplayObject` - the avplayerObject userdata\n   * `message`      - a string specifying the reason for the callback.\n * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:\n   * `actionMenu` - [hs._asm.avplayer:actionMenu](#actionMenu)\n   * `finished`   - [hs._asm.avplayer:trackCompleted](#trackCompleted)\n   * `pause`      - [hs._asm.avplayer:trackRate](#trackRate)\n   * `play`       - [hs._asm.avplayer:trackRate](#trackRate)\n   * `progress`   - [hs._asm.avplayer:trackProgress](#trackProgress)\n   * `seek`       - [hs._asm.avplayer:seek](#seek)\n   * `status`     - [hs._asm.avplayer:trackStatus](#trackStatus)",
        "stripped_doc" : [
          "Set the callback function for the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.avplayer:setCallback(fn) -> avplayerObject",
        "name" : "setCallback",
        "notes" : [
          " * The callback function should expect 2 or more arguments.  The first two arguments will always be:",
          "   * `avplayObject` - the avplayerObject userdata",
          "   * `message`      - a string specifying the reason for the callback.",
          " * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:",
          "   * `actionMenu` - [hs._asm.avplayer:actionMenu](#actionMenu)",
          "   * `finished`   - [hs._asm.avplayer:trackCompleted](#trackCompleted)",
          "   * `pause`      - [hs._asm.avplayer:trackRate](#trackRate)",
          "   * `play`       - [hs._asm.avplayer:trackRate](#trackRate)",
          "   * `progress`   - [hs._asm.avplayer:trackProgress](#trackProgress)",
          "   * `seek`       - [hs._asm.avplayer:seek](#seek)",
          "   * `status`     - [hs._asm.avplayer:trackStatus](#trackStatus)"
        ],
        "signature" : "hs._asm.avplayer:setCallback(fn) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Set the callback function for the avplayerObject.",
        "parameters" : [
          " * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.",
          ""
        ]
      },
      {
        "doc" : "Set or remove the additional actions menu from the media controls for the avplayer.\n\nParameters:\n * `menutable` - a table containing a menu definition as described in the documentation for `hs.menubar:setMenu`.  If `nil` is specified, any existing menu is removed.\n\nParameters:\n * the avplayerObject\n\nNotes:\n * All menu keys supported by `hs.menubar:setMenu`, except for the `fn` key, are supported by this method.\n * When a menu item is selected, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) is invoked with the following 4 arguments:\n   * the avplayerObject\n   * \"actionMenu\"\n   * the `title` field of the menu item selected\n   * a table containing the following keys set to true or false indicating which key modifiers were down when the menu item was selected: \"cmd\", \"shift\", \"alt\", \"ctrl\", and \"fn\".",
        "stripped_doc" : [
          "Set or remove the additional actions menu from the media controls for the avplayer.",
          ""
        ],
        "def" : "hs._asm.avplayer:actionMenu(menutable | nil) -> avplayerObject",
        "name" : "actionMenu",
        "notes" : [
          " * All menu keys supported by `hs.menubar:setMenu`, except for the `fn` key, are supported by this method.",
          " * When a menu item is selected, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) is invoked with the following 4 arguments:",
          "   * the avplayerObject",
          "   * \"actionMenu\"",
          "   * the `title` field of the menu item selected",
          "   * a table containing the following keys set to true or false indicating which key modifiers were down when the menu item was selected: \"cmd\", \"shift\", \"alt\", \"ctrl\", and \"fn\"."
        ],
        "signature" : "hs._asm.avplayer:actionMenu(menutable | nil) -> avplayerObject",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Set or remove the additional actions menu from the media controls for the avplayer.",
        "parameters" : [
          " * `menutable` - a table containing a menu definition as described in the documentation for `hs.menubar:setMenu`.  If `nil` is specified, any existing menu is removed.",
          "",
          " * the avplayerObject",
          ""
        ]
      },
      {
        "doc" : "Load the specified resource for playback.\n\nParameters:\n * `path` - a string specifying the file path or URL to the audiovisual resource.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.avplayer:play](#play) or [hs._asm.avplayer:rate](#rate) to begin playback.\n\n * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.avplayer:status](#status) will return \"failed\".\n * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed.",
        "stripped_doc" : [
          "Load the specified resource for playback.",
          ""
        ],
        "def" : "hs._asm.avplayer:load(path) -> avplayerObject",
        "name" : "load",
        "notes" : [
          " * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.avplayer:play](#play) or [hs._asm.avplayer:rate](#rate) to begin playback.",
          "",
          " * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.avplayer:status](#status) will return \"failed\".",
          " * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed."
        ],
        "signature" : "hs._asm.avplayer:load(path) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Load the specified resource for playback.",
        "parameters" : [
          " * `path` - a string specifying the file path or URL to the audiovisual resource.",
          ""
        ]
      },
      {
        "doc" : "Play the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 1.0 (see [hs._asm.avplayer:rate(1.0)](#rate)`)",
        "stripped_doc" : [
          "Play the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:play([fromBeginning]) -> avplayerObject",
        "name" : "play",
        "notes" : [
          " * this is equivalent to setting the rate to 1.0 (see [hs._asm.avplayer:rate(1.0)](#rate)`)"
        ],
        "signature" : "hs._asm.avplayer:play([fromBeginning]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Play the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.",
          ""
        ]
      },
      {
        "doc" : "Pause the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 0.0 (see [hs._asm.avplayer:rate(0.0)](#rate)`)",
        "stripped_doc" : [
          "Pause the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:pause() -> avplayerObject",
        "name" : "pause",
        "notes" : [
          " * this is equivalent to setting the rate to 0.0 (see [hs._asm.avplayer:rate(0.0)](#rate)`)"
        ],
        "signature" : "hs._asm.avplayer:pause() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Pause the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.\n\nParameters:\n * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.avplayer:mute](#mute).\n * A value of 0.0 is equivalent to [hs._asm.avplayer:pause](#pause).\n * A value of 1.0 is equivalent to [hs._asm.avplayer:play](#play).\n\n * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:\n   * Rates between 0.0 and 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field\n   * Rates greater than 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field\n   * The item can be played in reverse (a rate of -1.0) if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field\n   * Rates between 0.0 and -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field\n   * Rates less than -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field",
        "stripped_doc" : [
          "Get or set the rate of playback for the audiovisual content of the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:rate([rate]) -> avplayerObject | current value",
        "name" : "rate",
        "notes" : [
          " * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.avplayer:mute](#mute).",
          " * A value of 0.0 is equivalent to [hs._asm.avplayer:pause](#pause).",
          " * A value of 1.0 is equivalent to [hs._asm.avplayer:play](#play).",
          "",
          " * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:",
          "   * Rates between 0.0 and 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field",
          "   * Rates greater than 1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field",
          "   * The item can be played in reverse (a rate of -1.0) if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field",
          "   * Rates between 0.0 and -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field",
          "   * Rates less than -1.0 are allowed if [hs._asm.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field"
        ],
        "signature" : "hs._asm.avplayer:rate([rate]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.",
        "parameters" : [
          " * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not audio output is muted for the audovisual media item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not audio output is muted for the audovisual media item.",
          ""
        ],
        "def" : "hs._asm.avplayer:mute([state]) -> avplayerObject | current value",
        "name" : "mute",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:mute([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not audio output is muted for the audovisual media item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).\n\nParameters:\n * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
          ""
        ],
        "def" : "hs._asm.avplayer:volume([volume]) -> avplayerObject | current value",
        "name" : "volume",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:volume([volume]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
        "parameters" : [
          " * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
          ""
        ],
        "def" : "hs._asm.avplayer:ccEnabled([state]) -> avplayerObject | current value",
        "name" : "ccEnabled",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:ccEnabled([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a periodic callback at the interval specified.\n\nParameters:\n * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"progress\"\n   * the time in seconds specifying the current location in the media playback.\n\n * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface.",
        "stripped_doc" : [
          "Enable or disable a periodic callback at the interval specified.",
          ""
        ],
        "def" : "hs._asm.avplayer:trackProgress([number | nil]) -> avplayerObject | current value",
        "name" : "trackProgress",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"progress\"",
          "   * the time in seconds specifying the current location in the media playback.",
          "",
          " * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface."
        ],
        "signature" : "hs._asm.avplayer:trackProgress([number | nil]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.",
          ""
        ],
        "desc" : "Enable or disable a periodic callback at the interval specified.",
        "parameters" : [
          " * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the rate of playback changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value\n   * the rate that the playback was changed to.\n\n * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the rate of playback changes.",
          ""
        ],
        "def" : "hs._asm.avplayer:trackRate([state]) -> avplayerObject | current value",
        "name" : "trackRate",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value",
          "   * the rate that the playback was changed to.",
          "",
          " * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information."
        ],
        "signature" : "hs._asm.avplayer:trackRate([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the rate of playback changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.\n\nParameters:\n * None\n\nReturns:\n * a table containing the following media characteristics, or `nil` if no media content is currently loaded:\n   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.\n   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.\n   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.\n   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.\n   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.\n   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.\n   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.\n   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0.",
        "stripped_doc" : [
          "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.avplayer:playbackInformation() -> table | nil",
        "name" : "playbackInformation",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:playbackInformation() -> table | nil",
        "type" : "Method",
        "returns" : [
          " * a table containing the following media characteristics, or `nil` if no media content is currently loaded:",
          "   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.",
          "   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.",
          "   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.",
          "   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.",
          "   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.",
          "   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.",
          "   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.",
          "   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0."
        ],
        "desc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the current status of the media content loaded for playback.\n\nParameters:\n * None\n\nReturns:\n * One of the following status strings, or `nil` if no media content is currently loaded:\n   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.\n   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin\n   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error.",
        "stripped_doc" : [
          "Returns the current status of the media content loaded for playback.",
          ""
        ],
        "def" : "hs._asm.avplayer:status() -> status[, error] | nil",
        "name" : "status",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:status() -> status[, error] | nil",
        "type" : "Method",
        "returns" : [
          " * One of the following status strings, or `nil` if no media content is currently loaded:",
          "   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.",
          "   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin",
          "   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error."
        ],
        "desc" : "Returns the current status of the media content loaded for playback.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:\n   * the avplayerObject\n   * \"finished\"",
        "stripped_doc" : [
          "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
          ""
        ],
        "def" : "hs._asm.avplayer:trackCompleted([state]) -> avplayerObject | current value",
        "name" : "trackCompleted",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:",
          "   * the avplayerObject",
          "   * \"finished\""
        ],
        "signature" : "hs._asm.avplayer:trackCompleted([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the status of loading a media item changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"status\"\n   * a string matching one of the states described in [hs._asm.avplayer:status](#status)\n   * if the state reported is failed, an error message describing the error that occurred.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the status of loading a media item changes.",
          ""
        ],
        "def" : "hs._asm.avplayer:trackStatus([state]) -> avplayerObject | current value",
        "name" : "trackStatus",
        "notes" : [
          " * the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"status\"",
          "   * a string matching one of the states described in [hs._asm.avplayer:status](#status)",
          "   * if the state reported is failed, an error message describing the error that occurred."
        ],
        "signature" : "hs._asm.avplayer:trackStatus([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the status of loading a media item changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..",
          ""
        ]
      },
      {
        "doc" : "Returns the current position in seconds within the audiovisual media content.\n\nParameters:\n * None\n\nReturns:\n * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded.",
        "stripped_doc" : [
          "Returns the current position in seconds within the audiovisual media content.",
          ""
        ],
        "def" : "hs._asm.avplayer:time() -> number | nil",
        "name" : "time",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:time() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded."
        ],
        "desc" : "Returns the current position in seconds within the audiovisual media content.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.\n\nParameters:\n * None\n\nReturns:\n * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.\n\nNotes:\n * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.\n\n * a live stream may not provide duration information and also return `nan` for this method.\n\n * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:\n ~~~lua\n duration = avplayer:duration()\n if type(duration) == \"number\" and duration ~= duration then\n     -- the duration is equal to `nan`\n end\n~~~",
        "stripped_doc" : [
          "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
          ""
        ],
        "def" : "hs._asm.avplayer:duration() -> number | nil",
        "name" : "duration",
        "notes" : [
          " * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.",
          "",
          " * a live stream may not provide duration information and also return `nan` for this method.",
          "",
          " * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:",
          " ~~~lua",
          " duration = avplayer:duration()",
          " if type(duration) == \"number\" and duration ~= duration then",
          "     -- the duration is equal to `nan`",
          " end",
          "~~~"
        ],
        "signature" : "hs._asm.avplayer:duration() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.",
          ""
        ],
        "desc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.\n\nParameters:\n * `time`     - the location, in seconds, within the audiovisual content to seek to.\n * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.\n\nReturns:\n * the avplayerObject, or nil if no media content is currently loaded\n\nNotes:\n * If you specify `callback` as true, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"seek\"\n   * the current time, in seconds, specifying the current playback position in the media content\n   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request).",
        "stripped_doc" : [
          "Jumps to the specified location in the audiovisual content currently loaded into the player.",
          ""
        ],
        "def" : "hs._asm.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "name" : "seek",
        "notes" : [
          " * If you specify `callback` as true, the callback function (see [hs._asm.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"seek\"",
          "   * the current time, in seconds, specifying the current playback position in the media content",
          "   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request)."
        ],
        "signature" : "hs._asm.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject, or nil if no media content is currently loaded",
          ""
        ],
        "desc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.",
        "parameters" : [
          " * `time`     - the location, in seconds, within the audiovisual content to seek to.",
          " * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the full screen toggle button should be included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the full screen toggle button should be included in the media controls.",
          ""
        ],
        "def" : "hs._asm.avplayer:fullScreenButton([state]) -> avplayerObject | current value",
        "name" : "fullScreenButton",
        "notes" : [

        ],
        "signature" : "hs._asm.avplayer:fullScreenButton([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the full screen toggle button should be included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not external playback via AirPlay is allowed for this item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Get or set whether or not external playback via AirPlay is allowed for this item.",
          ""
        ],
        "def" : "hs._asm.avplayer:allowExternalPlayback([state]) -> avplayerObject | current value",
        "name" : "allowExternalPlayback",
        "notes" : [
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.avplayer:allowExternalPlayback([state]) -> avplayerObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not external playback via AirPlay is allowed for this item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.\n\nNotes:\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
          ""
        ],
        "def" : "hs._asm.avplayer:externalPlayback() -> Boolean",
        "name" : "externalPlayback",
        "notes" : [
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.avplayer:externalPlayback() -> Boolean",
        "type" : "Method",
        "returns" : [
          " * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.",
          ""
        ],
        "desc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "hs._asm.avplayer"
  }
]
