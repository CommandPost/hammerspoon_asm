[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Display warning or critical alert dialogs from within Hammerspoon",
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Creates a new alert object.\n\nParameters:\n * critical - an optional boolean, default false, specifying that the alert represents a critical notification as opposed to an informational one or a warning.\n\nReturns:\n * the alert object\n\nNotes:\n * A critical alert will show a caution icon with a smaller version of the alert's icon -- see [hs._asm.alert:icon](#icon) -- as a badge in the lower right corner.\n * Apple's current UI guidelines makes no visual distinction between informational or warning alerts -- this module implements the alert as critical or not critical because of this.",
        "stripped_doc" : [
          "Creates a new alert object.",
          ""
        ],
        "def" : "hs._asm.alert.new([critical]) -> alertObject",
        "name" : "new",
        "notes" : [
          " * A critical alert will show a caution icon with a smaller version of the alert's icon -- see [hs._asm.alert:icon](#icon) -- as a badge in the lower right corner.",
          " * Apple's current UI guidelines makes no visual distinction between informational or warning alerts -- this module implements the alert as critical or not critical because of this."
        ],
        "signature" : "hs._asm.alert.new([critical]) -> alertObject",
        "type" : "Constructor",
        "returns" : [
          " * the alert object",
          ""
        ],
        "desc" : "Creates a new alert object.",
        "parameters" : [
          " * critical - an optional boolean, default false, specifying that the alert represents a critical notification as opposed to an informational one or a warning.",
          ""
        ]
      }
    ],
    "doc" : "Display warning or critical alert dialogs from within Hammerspoon\n\nThis module allows you to create warning or critical alert dialog boxes from within Hammerspoon.  These dialogs are modal (meaning that no other Hammerspoon activity can occur while they are being displayed) and are currently limited to just providing one or more buttons for user interaction. Attempts to remove or mitigate these limitations are being examined.",
    "Method" : [
      {
        "doc" : "Set or remove a callback function which should be invoked if the user clicks on the help icon of the alert.\n\nParameters:\n * fn - a function to register as the callback when the user clicks on the help icon of the alert, or an explicit nil to remove any existing callback.\n\nReturns:\n * the alert object\n\nNotes:\n * If no help callback is set, the help icon will not be displayed in the alert dialog.\n * While the alert is being displayed with [hs._asm.alert:modal](#modal), Hammerspoon activity is blocked; however this callback function will be executed because it is within the same thread as the modal alert itself.  Be aware however that any action initiated by this callback function which relies on injecting events into the Hammerspoon application run loop (timers, notification watchers, etc.) will be delayed until the alert is dismissed.",
        "stripped_doc" : [
          "Set or remove a callback function which should be invoked if the user clicks on the help icon of the alert.",
          ""
        ],
        "def" : "hs._asm.alert:helpCallback(fn | nil) -> alertObject",
        "name" : "helpCallback",
        "notes" : [
          " * If no help callback is set, the help icon will not be displayed in the alert dialog.",
          " * While the alert is being displayed with [hs._asm.alert:modal](#modal), Hammerspoon activity is blocked; however this callback function will be executed because it is within the same thread as the modal alert itself.  Be aware however that any action initiated by this callback function which relies on injecting events into the Hammerspoon application run loop (timers, notification watchers, etc.) will be delayed until the alert is dismissed."
        ],
        "signature" : "hs._asm.alert:helpCallback(fn | nil) -> alertObject",
        "type" : "Method",
        "returns" : [
          " * the alert object",
          ""
        ],
        "desc" : "Set or remove a callback function which should be invoked if the user clicks on the help icon of the alert.",
        "parameters" : [
          " * fn - a function to register as the callback when the user clicks on the help icon of the alert, or an explicit nil to remove any existing callback.",
          ""
        ]
      },
      {
        "doc" : "Get or set the information text field of the alert.  This text is displayed in the main body of the alert.\n\nParameters:\n * text - an optional string specifying the text to be displayed in the main body of the alert. Defaults to the empty string, \"\".\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * The information text is displayed in the main body of the alert and is not in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed.",
        "stripped_doc" : [
          "Get or set the information text field of the alert.  This text is displayed in the main body of the alert.",
          ""
        ],
        "def" : "hs._asm.alert:information([text]) -> current value | alertObject",
        "name" : "information",
        "notes" : [
          " * The information text is displayed in the main body of the alert and is not in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed."
        ],
        "signature" : "hs._asm.alert:information([text]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the information text field of the alert.  This text is displayed in the main body of the alert.",
        "parameters" : [
          " * text - an optional string specifying the text to be displayed in the main body of the alert. Defaults to the empty string, \"\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the message text field of the alert.  This text is displayed at the top of the alert like a title for the alert.\n\nParameters:\n * text - an optional string specifying the text to be displayed at the top of the alert. Defaults to \"Alert\".\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * The message text is displayed at the top of the alert and is in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed.",
        "stripped_doc" : [
          "Get or set the message text field of the alert.  This text is displayed at the top of the alert like a title for the alert.",
          ""
        ],
        "def" : "hs._asm.alert:message([text]) -> current value | alertObject",
        "name" : "message",
        "notes" : [
          " * The message text is displayed at the top of the alert and is in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed."
        ],
        "signature" : "hs._asm.alert:message([text]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the message text field of the alert.  This text is displayed at the top of the alert like a title for the alert.",
        "parameters" : [
          " * text - an optional string specifying the text to be displayed at the top of the alert. Defaults to \"Alert\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the message icon for the alert.\n\nParameters:\n * image - an optional `hs.image` object specifying the image to use as the icon at the left of the alert dialog.  Defaults to the Hammerspoon application icon.  You can revert this to the Hammerspoon application icon by specifying an explicit nil as the image argument.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * If the alert is a critical one as specified when created with [hs._asm.alert.new](#new), this is the image which appears as the small badge at the lower right of the caution icon.",
        "stripped_doc" : [
          "Get or set the message icon for the alert.",
          ""
        ],
        "def" : "hs._asm.alert:icon([image]) -> current value | alertObject",
        "name" : "icon",
        "notes" : [
          " * If the alert is a critical one as specified when created with [hs._asm.alert.new](#new), this is the image which appears as the small badge at the lower right of the caution icon."
        ],
        "signature" : "hs._asm.alert:icon([image]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the message icon for the alert.",
        "parameters" : [
          " * image - an optional `hs.image` object specifying the image to use as the icon at the left of the alert dialog.  Defaults to the Hammerspoon application icon.  You can revert this to the Hammerspoon application icon by specifying an explicit nil as the image argument.",
          ""
        ]
      },
      {
        "doc" : "*** Currently does nothing *** : Get or set a callback to be invoked with the result of a non-modal alert when the user dismisses the dialog.\nParameters:\n * fn - a function to register as the callback when the user clicks on a button to dismiss the alert, or an explicit nil to remove any existing callback.\n\nReturns:\n * the alert object\n\nNotes:\n * This method is included for testing during development while a non-modal method of displaying the alerts is researched.  At present, using this method to set a callback has no affect since such a callback is never actually invoked.",
        "stripped_doc" : [
          "*** Currently does nothing *** : Get or set a callback to be invoked with the result of a non-modal alert when the user dismisses the dialog."
        ],
        "def" : "hs._asm.alert:resultCallback(fn | nil) -> alertObject",
        "name" : "resultCallback",
        "notes" : [
          " * This method is included for testing during development while a non-modal method of displaying the alerts is researched.  At present, using this method to set a callback has no affect since such a callback is never actually invoked."
        ],
        "signature" : "hs._asm.alert:resultCallback(fn | nil) -> alertObject",
        "type" : "Method",
        "returns" : [
          " * the alert object",
          ""
        ],
        "desc" : "*** Currently does nothing *** : Get or set a callback to be invoked with the result of a non-modal alert when the user dismisses the dialog.",
        "parameters" : [
          " * fn - a function to register as the callback when the user clicks on a button to dismiss the alert, or an explicit nil to remove any existing callback.",
          ""
        ]
      },
      {
        "doc" : "Displays the alert as a modal dialog, pausing Hammerspoon activity until the user makes their selection from the buttons provided.\n\nParameters:\n * None\n\nReturns:\n * the string title of the button the user clicked on to dismiss the alert.\n\nNotes:\n * as described in the [hs._asm.alert:buttons](#buttons) method, some buttons may have keyboard equivalents for clicking on them -- the string returned is identical and we have no way to distinguish *how* they selected a button, just which button they did select.",
        "stripped_doc" : [
          "Displays the alert as a modal dialog, pausing Hammerspoon activity until the user makes their selection from the buttons provided.",
          ""
        ],
        "def" : "hs._asm.alert:modal() -> result",
        "name" : "modal",
        "notes" : [
          " * as described in the [hs._asm.alert:buttons](#buttons) method, some buttons may have keyboard equivalents for clicking on them -- the string returned is identical and we have no way to distinguish *how* they selected a button, just which button they did select."
        ],
        "signature" : "hs._asm.alert:modal() -> result",
        "type" : "Method",
        "returns" : [
          " * the string title of the button the user clicked on to dismiss the alert.",
          ""
        ],
        "desc" : "Displays the alert as a modal dialog, pausing Hammerspoon activity until the user makes their selection from the buttons provided.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the alert should automatically grab focus when it is displayed with [hs._asm.alert:modal](#modal).\n\nParameters:\n * state - an optional boolean, default true, indicathing whether the alert dialog should become the focused user interface element when it is displayed.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * When set to true, the application which was frontmost right before the alert is displayed will be reactivated when the alert is dismissed.\n * When set to false then the user must click on the dialog before it will respond to any key equivalents which may be in effect for the alert -- see [hs._asm.alert:buttons](#buttons).",
        "stripped_doc" : [
          "Get or set whether or not the alert should automatically grab focus when it is displayed with [hs._asm.alert:modal](#modal).",
          ""
        ],
        "def" : "hs._asm.alert:autoActivate([state]) -> current value | alertObject",
        "name" : "autoActivate",
        "notes" : [
          " * When set to true, the application which was frontmost right before the alert is displayed will be reactivated when the alert is dismissed.",
          " * When set to false then the user must click on the dialog before it will respond to any key equivalents which may be in effect for the alert -- see [hs._asm.alert:buttons](#buttons)."
        ],
        "signature" : "hs._asm.alert:autoActivate([state]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the alert should automatically grab focus when it is displayed with [hs._asm.alert:modal](#modal).",
        "parameters" : [
          " * state - an optional boolean, default true, indicathing whether the alert dialog should become the focused user interface element when it is displayed.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the Hammerspoon console should be hidden while the alert is visible.\n\nParameters:\n * state - an optional boolean, default false, indicathing whether the Hammerspoon console, should be hidden when the alert is visible.  If this is set to true and the console is visible, it will be hidden and then re-opened when the alert is dismissed.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * Because responding to an alert requires Hammerspoon to become the focused application, the Hammerspoon console may be brought forward if it is visible when you display an alert. When used in conjunction with [hs._asm.alert:autoActivate(true)[#autoActivate], this method may be used to minimize the visual distraction of this.",
        "stripped_doc" : [
          "Get or set whether or not the Hammerspoon console should be hidden while the alert is visible.",
          ""
        ],
        "def" : "hs._asm.alert:autoHideConsole([state]) -> current value | alertObject",
        "name" : "autoHideConsole",
        "notes" : [
          " * Because responding to an alert requires Hammerspoon to become the focused application, the Hammerspoon console may be brought forward if it is visible when you display an alert. When used in conjunction with [hs._asm.alert:autoActivate(true)[#autoActivate], this method may be used to minimize the visual distraction of this."
        ],
        "signature" : "hs._asm.alert:autoHideConsole([state]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the Hammerspoon console should be hidden while the alert is visible.",
        "parameters" : [
          " * state - an optional boolean, default false, indicathing whether the Hammerspoon console, should be hidden when the alert is visible.  If this is set to true and the console is visible, it will be hidden and then re-opened when the alert is dismissed.",
          ""
        ]
      },
      {
        "doc" : "Get or set the list of buttons which are displayed by the alert as options for the user to choose from.\n\nParameters:\n * an optional table containing a list of one or more strings which will be the titles on the buttons provided in the alert.  Defaults to `{ \"OK\" }`.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * The list of buttons will be displayed from right to left in the order in which they appear in this list.\n * The *last* button title specifies the default for the alert and will be selected if the user hits the Return key rather than clicking on another button.\n * If a button (other than the *last* one) is named \"Cancel\", then the user may press the Escape key to choose it instead of clicking on it.\n * If a button (other than the *last* one) is named \"Don't Save\", then the user may press Command-D to choose it instead of clicking on it.\n\n* These key equivalents are built in. At preset there is no way to override them or set your own, though adding this is being considered.\n* Programmers note: This ordering of the button titles was chosen to more accurately represent their visual order and is opposite from the way buttons are added internally to the NSAlert object.",
        "stripped_doc" : [
          "Get or set the list of buttons which are displayed by the alert as options for the user to choose from.",
          ""
        ],
        "def" : "hs._asm.alert:buttons([list]) -> current value | alertObject",
        "name" : "buttons",
        "notes" : [
          " * The list of buttons will be displayed from right to left in the order in which they appear in this list.",
          " * The *last* button title specifies the default for the alert and will be selected if the user hits the Return key rather than clicking on another button.",
          " * If a button (other than the *last* one) is named \"Cancel\", then the user may press the Escape key to choose it instead of clicking on it.",
          " * If a button (other than the *last* one) is named \"Don't Save\", then the user may press Command-D to choose it instead of clicking on it.",
          "",
          "* These key equivalents are built in. At preset there is no way to override them or set your own, though adding this is being considered.",
          "* Programmers note: This ordering of the button titles was chosen to more accurately represent their visual order and is opposite from the way buttons are added internally to the NSAlert object."
        ],
        "signature" : "hs._asm.alert:buttons([list]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the list of buttons which are displayed by the alert as options for the user to choose from.",
        "parameters" : [
          " * an optional table containing a list of one or more strings which will be the titles on the buttons provided in the alert.  Defaults to `{ \"OK\" }`.",
          ""
        ]
      }
    ],
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Creates a new alert object.\n\nParameters:\n * critical - an optional boolean, default false, specifying that the alert represents a critical notification as opposed to an informational one or a warning.\n\nReturns:\n * the alert object\n\nNotes:\n * A critical alert will show a caution icon with a smaller version of the alert's icon -- see [hs._asm.alert:icon](#icon) -- as a badge in the lower right corner.\n * Apple's current UI guidelines makes no visual distinction between informational or warning alerts -- this module implements the alert as critical or not critical because of this.",
        "stripped_doc" : [
          "Creates a new alert object.",
          ""
        ],
        "def" : "hs._asm.alert.new([critical]) -> alertObject",
        "name" : "new",
        "notes" : [
          " * A critical alert will show a caution icon with a smaller version of the alert's icon -- see [hs._asm.alert:icon](#icon) -- as a badge in the lower right corner.",
          " * Apple's current UI guidelines makes no visual distinction between informational or warning alerts -- this module implements the alert as critical or not critical because of this."
        ],
        "signature" : "hs._asm.alert.new([critical]) -> alertObject",
        "type" : "Constructor",
        "returns" : [
          " * the alert object",
          ""
        ],
        "desc" : "Creates a new alert object.",
        "parameters" : [
          " * critical - an optional boolean, default false, specifying that the alert represents a critical notification as opposed to an informational one or a warning.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the alert should automatically grab focus when it is displayed with [hs._asm.alert:modal](#modal).\n\nParameters:\n * state - an optional boolean, default true, indicathing whether the alert dialog should become the focused user interface element when it is displayed.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * When set to true, the application which was frontmost right before the alert is displayed will be reactivated when the alert is dismissed.\n * When set to false then the user must click on the dialog before it will respond to any key equivalents which may be in effect for the alert -- see [hs._asm.alert:buttons](#buttons).",
        "stripped_doc" : [
          "Get or set whether or not the alert should automatically grab focus when it is displayed with [hs._asm.alert:modal](#modal).",
          ""
        ],
        "def" : "hs._asm.alert:autoActivate([state]) -> current value | alertObject",
        "name" : "autoActivate",
        "notes" : [
          " * When set to true, the application which was frontmost right before the alert is displayed will be reactivated when the alert is dismissed.",
          " * When set to false then the user must click on the dialog before it will respond to any key equivalents which may be in effect for the alert -- see [hs._asm.alert:buttons](#buttons)."
        ],
        "signature" : "hs._asm.alert:autoActivate([state]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the alert should automatically grab focus when it is displayed with [hs._asm.alert:modal](#modal).",
        "parameters" : [
          " * state - an optional boolean, default true, indicathing whether the alert dialog should become the focused user interface element when it is displayed.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the Hammerspoon console should be hidden while the alert is visible.\n\nParameters:\n * state - an optional boolean, default false, indicathing whether the Hammerspoon console, should be hidden when the alert is visible.  If this is set to true and the console is visible, it will be hidden and then re-opened when the alert is dismissed.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * Because responding to an alert requires Hammerspoon to become the focused application, the Hammerspoon console may be brought forward if it is visible when you display an alert. When used in conjunction with [hs._asm.alert:autoActivate(true)[#autoActivate], this method may be used to minimize the visual distraction of this.",
        "stripped_doc" : [
          "Get or set whether or not the Hammerspoon console should be hidden while the alert is visible.",
          ""
        ],
        "def" : "hs._asm.alert:autoHideConsole([state]) -> current value | alertObject",
        "name" : "autoHideConsole",
        "notes" : [
          " * Because responding to an alert requires Hammerspoon to become the focused application, the Hammerspoon console may be brought forward if it is visible when you display an alert. When used in conjunction with [hs._asm.alert:autoActivate(true)[#autoActivate], this method may be used to minimize the visual distraction of this."
        ],
        "signature" : "hs._asm.alert:autoHideConsole([state]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the Hammerspoon console should be hidden while the alert is visible.",
        "parameters" : [
          " * state - an optional boolean, default false, indicathing whether the Hammerspoon console, should be hidden when the alert is visible.  If this is set to true and the console is visible, it will be hidden and then re-opened when the alert is dismissed.",
          ""
        ]
      },
      {
        "doc" : "Get or set the list of buttons which are displayed by the alert as options for the user to choose from.\n\nParameters:\n * an optional table containing a list of one or more strings which will be the titles on the buttons provided in the alert.  Defaults to `{ \"OK\" }`.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * The list of buttons will be displayed from right to left in the order in which they appear in this list.\n * The *last* button title specifies the default for the alert and will be selected if the user hits the Return key rather than clicking on another button.\n * If a button (other than the *last* one) is named \"Cancel\", then the user may press the Escape key to choose it instead of clicking on it.\n * If a button (other than the *last* one) is named \"Don't Save\", then the user may press Command-D to choose it instead of clicking on it.\n\n* These key equivalents are built in. At preset there is no way to override them or set your own, though adding this is being considered.\n* Programmers note: This ordering of the button titles was chosen to more accurately represent their visual order and is opposite from the way buttons are added internally to the NSAlert object.",
        "stripped_doc" : [
          "Get or set the list of buttons which are displayed by the alert as options for the user to choose from.",
          ""
        ],
        "def" : "hs._asm.alert:buttons([list]) -> current value | alertObject",
        "name" : "buttons",
        "notes" : [
          " * The list of buttons will be displayed from right to left in the order in which they appear in this list.",
          " * The *last* button title specifies the default for the alert and will be selected if the user hits the Return key rather than clicking on another button.",
          " * If a button (other than the *last* one) is named \"Cancel\", then the user may press the Escape key to choose it instead of clicking on it.",
          " * If a button (other than the *last* one) is named \"Don't Save\", then the user may press Command-D to choose it instead of clicking on it.",
          "",
          "* These key equivalents are built in. At preset there is no way to override them or set your own, though adding this is being considered.",
          "* Programmers note: This ordering of the button titles was chosen to more accurately represent their visual order and is opposite from the way buttons are added internally to the NSAlert object."
        ],
        "signature" : "hs._asm.alert:buttons([list]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the list of buttons which are displayed by the alert as options for the user to choose from.",
        "parameters" : [
          " * an optional table containing a list of one or more strings which will be the titles on the buttons provided in the alert.  Defaults to `{ \"OK\" }`.",
          ""
        ]
      },
      {
        "doc" : "Set or remove a callback function which should be invoked if the user clicks on the help icon of the alert.\n\nParameters:\n * fn - a function to register as the callback when the user clicks on the help icon of the alert, or an explicit nil to remove any existing callback.\n\nReturns:\n * the alert object\n\nNotes:\n * If no help callback is set, the help icon will not be displayed in the alert dialog.\n * While the alert is being displayed with [hs._asm.alert:modal](#modal), Hammerspoon activity is blocked; however this callback function will be executed because it is within the same thread as the modal alert itself.  Be aware however that any action initiated by this callback function which relies on injecting events into the Hammerspoon application run loop (timers, notification watchers, etc.) will be delayed until the alert is dismissed.",
        "stripped_doc" : [
          "Set or remove a callback function which should be invoked if the user clicks on the help icon of the alert.",
          ""
        ],
        "def" : "hs._asm.alert:helpCallback(fn | nil) -> alertObject",
        "name" : "helpCallback",
        "notes" : [
          " * If no help callback is set, the help icon will not be displayed in the alert dialog.",
          " * While the alert is being displayed with [hs._asm.alert:modal](#modal), Hammerspoon activity is blocked; however this callback function will be executed because it is within the same thread as the modal alert itself.  Be aware however that any action initiated by this callback function which relies on injecting events into the Hammerspoon application run loop (timers, notification watchers, etc.) will be delayed until the alert is dismissed."
        ],
        "signature" : "hs._asm.alert:helpCallback(fn | nil) -> alertObject",
        "type" : "Method",
        "returns" : [
          " * the alert object",
          ""
        ],
        "desc" : "Set or remove a callback function which should be invoked if the user clicks on the help icon of the alert.",
        "parameters" : [
          " * fn - a function to register as the callback when the user clicks on the help icon of the alert, or an explicit nil to remove any existing callback.",
          ""
        ]
      },
      {
        "doc" : "Get or set the message icon for the alert.\n\nParameters:\n * image - an optional `hs.image` object specifying the image to use as the icon at the left of the alert dialog.  Defaults to the Hammerspoon application icon.  You can revert this to the Hammerspoon application icon by specifying an explicit nil as the image argument.\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * If the alert is a critical one as specified when created with [hs._asm.alert.new](#new), this is the image which appears as the small badge at the lower right of the caution icon.",
        "stripped_doc" : [
          "Get or set the message icon for the alert.",
          ""
        ],
        "def" : "hs._asm.alert:icon([image]) -> current value | alertObject",
        "name" : "icon",
        "notes" : [
          " * If the alert is a critical one as specified when created with [hs._asm.alert.new](#new), this is the image which appears as the small badge at the lower right of the caution icon."
        ],
        "signature" : "hs._asm.alert:icon([image]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the message icon for the alert.",
        "parameters" : [
          " * image - an optional `hs.image` object specifying the image to use as the icon at the left of the alert dialog.  Defaults to the Hammerspoon application icon.  You can revert this to the Hammerspoon application icon by specifying an explicit nil as the image argument.",
          ""
        ]
      },
      {
        "doc" : "Get or set the information text field of the alert.  This text is displayed in the main body of the alert.\n\nParameters:\n * text - an optional string specifying the text to be displayed in the main body of the alert. Defaults to the empty string, \"\".\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * The information text is displayed in the main body of the alert and is not in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed.",
        "stripped_doc" : [
          "Get or set the information text field of the alert.  This text is displayed in the main body of the alert.",
          ""
        ],
        "def" : "hs._asm.alert:information([text]) -> current value | alertObject",
        "name" : "information",
        "notes" : [
          " * The information text is displayed in the main body of the alert and is not in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed."
        ],
        "signature" : "hs._asm.alert:information([text]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the information text field of the alert.  This text is displayed in the main body of the alert.",
        "parameters" : [
          " * text - an optional string specifying the text to be displayed in the main body of the alert. Defaults to the empty string, \"\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the message text field of the alert.  This text is displayed at the top of the alert like a title for the alert.\n\nParameters:\n * text - an optional string specifying the text to be displayed at the top of the alert. Defaults to \"Alert\".\n\nReturns:\n * if an argument is provided, returns the alert object; otherwise returns the current value\n\nNotes:\n * The message text is displayed at the top of the alert and is in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed.",
        "stripped_doc" : [
          "Get or set the message text field of the alert.  This text is displayed at the top of the alert like a title for the alert.",
          ""
        ],
        "def" : "hs._asm.alert:message([text]) -> current value | alertObject",
        "name" : "message",
        "notes" : [
          " * The message text is displayed at the top of the alert and is in bold.  It can be multiple lines in length, and you can use `\\\\n` to force an explicit line break within the text to be displayed."
        ],
        "signature" : "hs._asm.alert:message([text]) -> current value | alertObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the alert object; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the message text field of the alert.  This text is displayed at the top of the alert like a title for the alert.",
        "parameters" : [
          " * text - an optional string specifying the text to be displayed at the top of the alert. Defaults to \"Alert\".",
          ""
        ]
      },
      {
        "doc" : "Displays the alert as a modal dialog, pausing Hammerspoon activity until the user makes their selection from the buttons provided.\n\nParameters:\n * None\n\nReturns:\n * the string title of the button the user clicked on to dismiss the alert.\n\nNotes:\n * as described in the [hs._asm.alert:buttons](#buttons) method, some buttons may have keyboard equivalents for clicking on them -- the string returned is identical and we have no way to distinguish *how* they selected a button, just which button they did select.",
        "stripped_doc" : [
          "Displays the alert as a modal dialog, pausing Hammerspoon activity until the user makes their selection from the buttons provided.",
          ""
        ],
        "def" : "hs._asm.alert:modal() -> result",
        "name" : "modal",
        "notes" : [
          " * as described in the [hs._asm.alert:buttons](#buttons) method, some buttons may have keyboard equivalents for clicking on them -- the string returned is identical and we have no way to distinguish *how* they selected a button, just which button they did select."
        ],
        "signature" : "hs._asm.alert:modal() -> result",
        "type" : "Method",
        "returns" : [
          " * the string title of the button the user clicked on to dismiss the alert.",
          ""
        ],
        "desc" : "Displays the alert as a modal dialog, pausing Hammerspoon activity until the user makes their selection from the buttons provided.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "*** Currently does nothing *** : Get or set a callback to be invoked with the result of a non-modal alert when the user dismisses the dialog.\nParameters:\n * fn - a function to register as the callback when the user clicks on a button to dismiss the alert, or an explicit nil to remove any existing callback.\n\nReturns:\n * the alert object\n\nNotes:\n * This method is included for testing during development while a non-modal method of displaying the alerts is researched.  At present, using this method to set a callback has no affect since such a callback is never actually invoked.",
        "stripped_doc" : [
          "*** Currently does nothing *** : Get or set a callback to be invoked with the result of a non-modal alert when the user dismisses the dialog."
        ],
        "def" : "hs._asm.alert:resultCallback(fn | nil) -> alertObject",
        "name" : "resultCallback",
        "notes" : [
          " * This method is included for testing during development while a non-modal method of displaying the alerts is researched.  At present, using this method to set a callback has no affect since such a callback is never actually invoked."
        ],
        "signature" : "hs._asm.alert:resultCallback(fn | nil) -> alertObject",
        "type" : "Method",
        "returns" : [
          " * the alert object",
          ""
        ],
        "desc" : "*** Currently does nothing *** : Get or set a callback to be invoked with the result of a non-modal alert when the user dismisses the dialog.",
        "parameters" : [
          " * fn - a function to register as the callback when the user clicks on a button to dismiss the alert, or an explicit nil to remove any existing callback.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.alert"
  }
]