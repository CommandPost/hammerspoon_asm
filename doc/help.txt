> help.hs.doc
Create documentation objects for interactive help within Hammerspoon

The documentation object created is a table with tostring metamethods allowing access to a specific functions documentation by appending the path to the method or function to the object created.

From the Hammerspoon console:

      doc = require("hs.doc")
      doc.hs.application

Results in:
      Manipulate running applications

      [submodules]
      hs.application.watcher

      [subitems]
      hs.application:activate([allWindows]) -> bool
      hs.application:allWindows() -> window[]
          ...
      hs.application:visibleWindows() -> win[]

By default, the internal core documentation and portions of the Lua 5.3 manual, located at http://www.lua.org/manual/5.3/manual.html, are already registered for inclusion within this documentation object, but you can register additional documentation from 3rd party modules with `hs.registerJSONFile(...)`.

[submodules]
builder
hsdocs
markdown
spoonsupport

[subitems]
hs.doc.help(identifier)
hs.doc.locateJSONFile(module) -> path | false, message
hs.doc.registerJSONFile(jsonfile) -> status[, message]
hs.doc.registeredFiles() -> table
hs.doc.unregisterJSONFile(jsonfile, [isSpoon]) -> status[, message]
hs.doc.validateJSONFile(jsonfile) -> status, message|table



> help.hs.doc.builder
Builds documentation support files.  Still experimental.

This submodule provides functions for mimicking the documentation generation processes used when generating the official Hammerspoon documentation.  The long term goal is to provide a mechanism for generating complete Hammerspoon documentation in all of its formats with only the Hammerspoon application and source files without any additional software required.

This submodule can be used to generate and maintain the documentation for Spoon bundles and can also be used to generate documentation for third-party modules as well.

Documentation for modules and spoons is expected to be embedded in the source code for the relevant object in specially formatted comment strings.  A very brief example of how to format documentation can be found at https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#documentation, but a better treatment is planned.

Most of this submodule should be considered at the "Proof of Concept" stage and will require some additional work on your part to generate useful documentation in HTML, Markdown, or Docset formats.  This is expected to change in the future.

[submodules]

[subitems]
hs.doc.builder.genComments(path, [recurse]) -> table
hs.doc.builder.genJSON(source) -> string
hs.doc.builder.genSQL(source) -> string



> help.hs.doc.hsdocs
Manage the internal documentation web server.

This module provides functions for managing the Hammerspoon built-in documentation web server.  Currently, this is the same documentation available in the Dash docset for Hammerspoon, but does not require third party software for viewing.

Future enhancements to this module under consideration include:
 * Support for third-party modules to add to the documentation set at run-time
 * Markdown/HTML based tutorials and How-To examples
 * Documentation for the LuaSkin Objective-C Framework
 * Lua Reference documentation

The intent of this sub-module is to provide as close a rendering of the same documentation available at the Hammerspoon Github site and Dash documentation as possible in a manner suitable for run-time modification so module developers can test out documentation additions without requiring a complete recompilation of the Hammerspoon source.  As always, the most current and official documentation can be found at http://www.hammerspoon.org and in the official Hammerspoon Dash docset.

[submodules]

[subitems]
hs.doc.hsdocs.browserDarkMode([value]) -> currentValue
hs.doc.hsdocs.browserFrame([frameTable]) -> currentValue
hs.doc.hsdocs.forceExternalBrowser([value]) -> currentValue
hs.doc.hsdocs.help([identifier]) -> nil
hs.doc.hsdocs.interface([interface]) -> currentValue
hs.doc.hsdocs.moduleEntitiesInSidebar([value]) -> currentValue
hs.doc.hsdocs.port([value]) -> currentValue
hs.doc.hsdocs.start() -> `hs.doc.hsdocs`
hs.doc.hsdocs.stop() -> `hs.doc.hsdocs`
hs.doc.hsdocs.trackBrowserFrame([value]) -> currentValue



> help.hs.doc.markdown
Markdown to HTML and plaintext conversion support used by hs.doc

This module provides Github-Flavored-Markdown conversion support used by hs.doc.  This module is a Lua wrapper to the C code portion of the Ruby gem `github-markdown`, available at https://rubygems.org/gems/github-markdown/versions/0.6.9.

The Ruby gem `github-markdown` was chosen as the code base for this module because it is the tool used to generate the official Hammerspoon Dash docset.

The Lua wrapper portion is licensed under the MIT license by the Hammerspoon development team.  The C code portion of the Ruby gem is licensed under the MIT license by GitHub, Inc.

[submodules]

[subitems]
hs.doc.markdown.convert(markdown, [type]) -> output



> help.hs.doc.spoonsupport
Provides run-time support for generating and including documentation for installed Hammerspoon Spoon bundles.

This module provides support for building (if necessary) and loading the documentation for installed Spoon bundles.  In general, it is not expected that most users will have a need to access these functions directly.

[submodules]

[subitems]
hs.doc.spoonsupport.findSpoons() -> pathTable, spoonsTable
hs.doc.spoonsupport.makeDocsFile(spoonPath, [force]) -> none
hs.doc.spoonsupport.updateDocFiles() -> none
